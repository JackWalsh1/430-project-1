/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/scriptTagCode.js":
/*!*********************************!*\
  !*** ./client/scriptTagCode.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_gameLogic_gameLogic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/gameLogic/gameLogic.js */ \"./src/gameLogic/gameLogic.js\");\n\r\n\r\nconst handleResponse = async (response, parseResponse) => {\r\n\t// get game if valid\r\n\tif (response.status === 200 || response.status === 201) {\r\n\t\tlet responseJSON = await response.json();\r\n\t\tlet activePlayer = document.querySelector(\"#playerSelect\").value;\r\n\t\tconsole.log(responseJSON);\r\n\t\treturn (0,_src_gameLogic_gameLogic_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(responseJSON.gameID, activePlayer);\r\n\t}\r\n\r\n\t// get content and then create h1 / p if needed - otherwise, just get them\r\n\tconst gameStatus = document.querySelector(\"#gameStatus\");\r\n\r\n\tconst statusCodes = {\r\n\t400: `<b>Invalid game code. It must be exactly 4 letters.</b>`,\r\n\t404: `Game does not exist. Try creating it!`,\r\n\t409: `Game already exists. Try joining it!`\r\n\t};\r\n\r\n\tgameStatus.innerHTML = statusCodes[response.status]; \r\n};\r\n\r\nconst joinGame = async (joinGameForm) => {\r\n\t// build response for get OR head using url / method consts\r\n\tlet gameID = joinGameForm.querySelector(\"#gameIDField\").value;\r\n\t//let url = `/getGame?gameID=${gameID}`;\r\n\tconsole.log(gameID);\r\n\tlet response = await fetch (\"/getGame?gameID=\" + gameID, {\r\n\t\tmethod: \"GET\",\r\n\t\theaders: {\r\n\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t});\r\n\r\n\t// handle the response\r\n\thandleResponse(response, true);\r\n};\r\n\r\nconst createGame = async (createGameForm) => {\r\n\tlet response = await fetch(\"/createGame\", {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n\t\t'Accept': 'application/json',\r\n\t\t},\r\n\t\tbody: `gameID=${createGameForm.querySelector('#gameIDField').value}`,\r\n\t});\r\n\r\n\t// always print a response for post\r\n\thandleResponse(response, true);\r\n};\r\n\r\nconst init = () => {\r\n\tconst joinGameForm = document.querySelector('#joinGameForm');\r\n\tconst createGameForm = document.querySelector('#createGameForm');\r\n\r\n\t// create functions to override initial form functions\r\n\tconst joinGameFormAction = (e) => {\r\n\te.preventDefault();\r\n\tjoinGame(joinGameForm);\r\n\treturn false;\r\n\t};\r\n\r\n\tconst createGameFormAction = (e) => {\r\n\te.preventDefault();\r\n\tcreateGame(createGameForm);\r\n\treturn false;\r\n\t};\r\n\r\n\t// attach evt listeners to forms\r\n\tjoinGameForm.addEventListener('submit', joinGameFormAction);\r\n\tcreateGameForm.addEventListener('submit', createGameFormAction);\r\n\r\n\tdocument.querySelector(\"#gameContainer\").style.display = \"none\";\r\n\r\n\tconst gameStatus = document.querySelector(\"#gameStatus\");\r\n\r\n\tgameStatus.innerHTML = \"Create an existing game using 4 letters OR join one that already exists!\";\r\n};\r\nwindow.onload = init;\n\n//# sourceURL=webpack://430-project-1/./client/scriptTagCode.js?");

/***/ }),

/***/ "./src/gameLogic/buttonClass.js":
/*!**************************************!*\
  !*** ./src/gameLogic/buttonClass.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Button)\n/* harmony export */ });\n// creates button\n// functionName = function that button calls when pressed\n\n/* eslint-env global */\n\nclass Button {\n  constructor(idName, className, width, height, backgroundColor, text, onclick) {\n    this.idName = idName;\n    this.className = className;\n    this.width = width;\n    this.height = height;\n    this.backgroundColor = backgroundColor;\n    this.text = text;\n    this.onclick = onclick;\n    this.div = '';\n  }\n\n  // creates button\n  createButton() {\n    // if not already made\n    if (!this.div) {\n      // set up container\n      const button = document.createElement('div');\n\n      // input elements\n      if (this.idName) {\n        button.setAttribute('id', this.idName);\n      }\n      if (this.className) {\n        button.setAttribute('class', this.className);\n      }\n      if (this.onclick) {\n        button.addEventListener('click', (evt) => {\n          this.onclick(evt);\n        });\n      }\n\n      // set dimensions / color\n      button.style.width = this.width;\n      button.style.height = this.height;\n      button.style.backgroundColor = this.backgroundColor;\n\n      // create text\n      const textnode = document.createTextNode(this.text);\n      button.appendChild(textnode);\n\n      // log button\n      this.div = button;\n    }\n\n    // return button - also works as getter\n    return this.div;\n  }\n}\n\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/buttonClass.js?");

/***/ }),

/***/ "./src/gameLogic/gameLogic.js":
/*!************************************!*\
  !*** ./src/gameLogic/gameLogic.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/gameLogic/utils.js\");\n/* harmony import */ var _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buttonClass.js */ \"./src/gameLogic/buttonClass.js\");\n\n\n\n// global containers needed\nlet gameContainer = document.querySelector('#gameContainer');\n\n// global variables for games\nlet currentPlayer;\nlet round;\nlet aiPlaying;\nlet remainingTiles = [];\nlet player1Tiles = [];\nlet player2Tiles = [];\n\nlet blackHoleBoardArray;\n\n// gets current game state and returns game obj from json\nasync function getGameState(gameID) {\n  const response = await fetch(`/getGameState?gameID=${gameID}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n    },\n  });\n\n  const json = await response.json();\n  return json.game;\n}\n\nfunction createPlayerColumn(player, currentRound) {\n  const redPlayer = {\n    playerNum: 1,\n    color: '#FF0000',\n  };\n\n  const bluePlayer = {\n    playerNum: 2,\n    color: '#0000FF',\n  };\n\n  const piecesRequested = player === 'red' ? redPlayer : bluePlayer;\n\n  // create player pieces / container\n  const playerColumn = document.createElement('div');\n  playerColumn.setAttribute('id', `player${piecesRequested.playerNum}Pieces`);\n  playerColumn.setAttribute('class', 'playerColumn');\n\n  const playerName = document.createElement('p');\n  playerName.setAttribute('id', `player${piecesRequested.playerNum}Name`);\n  playerName.setAttribute('class', 'playerName');\n  playerName.innerHTML = 'Player';\n  playerColumn.appendChild(playerName);\n\n  // only create as many pieces as physically available\n  for (let i = currentRound; i < 11; i++) {\n    // create space\n    const numTile = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\n      `player${piecesRequested.playerNum}Piece${i}`,\n      `playerPiece player${piecesRequested.playerNum}Piece`,\n      '65px',\n      '65px',\n      piecesRequested.color,\n      i,\n      '',\n    );\n\n    playerColumn.appendChild(numTile.createButton());\n  }\n  return playerColumn;\n}\n\nfunction calculateWinner() {\n  const blackHole = remainingTiles[0].div;\n  let blackHoleRow; let\n    blackHolePosition;\n  const player1ScoreTiles = [];\n  const player2ScoreTiles = [];\n  let player1Score = 0;\n  let player2Score = 0;\n  let result;\n\n  // find position of black hole in pyramid structure\n  for (let i = 0; i < blackHoleBoardArray.length; i++) {\n    for (let j = 0; j < blackHoleBoardArray[i].length; j++) {\n      if (blackHoleBoardArray[i][j] === blackHole) {\n        blackHoleRow = i;\n        blackHolePosition = j;\n        blackHoleBoardArray[i][j].classList.add('isDisabled');\n      }\n    }\n  }\n\n  // create two arrays of sucked in numbers - one for each player\n  for (let i = -1; i < 2; i++) {\n    for (let j = -1; j < 2; j++) {\n      // ignores non-adjacent squares\n      if (i !== j) {\n        // excludes non-real indexes - a lot of weird math behind this one...\n        if (\n          blackHoleRow + i + blackHolePosition + j < 6\n                      && blackHoleRow + i >= 0\n                      && blackHolePosition + j >= 0) {\n          // check which player's piece was sucked in\n          const spaceSuckedIn = blackHoleBoardArray[blackHoleRow + i][blackHolePosition + j];\n          // by cycling through all ten possible tiles\n          for (let k = 0; k < 10; k++) {\n            // push value of space + add it to sum\n            if (spaceSuckedIn === player1Tiles[k]) {\n              player1ScoreTiles.push(spaceSuckedIn.innerHTML);\n              player1Score += parseInt(spaceSuckedIn.innerHTML, 10);\n            } else if (spaceSuckedIn === player2Tiles[k]) {\n              player2ScoreTiles.push(spaceSuckedIn.innerHTML);\n              player2Score += parseInt(spaceSuckedIn.innerHTML, 10);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // check win conditions\n  // if the score is higher\n  if (player1Score === player2Score) {\n    // tiebreaker 1: if less tiles sucked in\n    if (player1ScoreTiles.length === player2ScoreTiles.length) {\n      // tiebreaker 2: sort tiles and check which piece is the lowest\n      // if they're exactly equal - tie\n      player1ScoreTiles.sort((a, b) => b - a);\n      player2ScoreTiles.sort((a, b) => b - a);\n      for (let i = 0; i < player1ScoreTiles.length; i++) {\n        if (player1ScoreTiles[i] < player2ScoreTiles[i]) {\n          result = `${document.body.querySelector('#player1Name').innerHTML} has won by having a ${player1ScoreTiles[i]} vs a ${player2ScoreTiles[i]} sucked in!`;\n        } else if (player1ScoreTiles[i] > player2ScoreTiles[i]) {\n          result = `${document.body.querySelector('#player2Name').innerHTML} has won by having a ${player2ScoreTiles[i]} vs a ${player1ScoreTiles[i]} sucked in!`;\n        }\n        // everything else is just a result being stored and printed\n      }\n      if (!result) {\n        result = 'This game is a perfect tie!';\n      }\n    } else if (player1ScoreTiles.length < player2ScoreTiles.length) {\n      result = `${document.body.querySelector('#player1Name').innerHTML} has won by having less pieces sucked in!`;\n    } else {\n      result = `${document.body.querySelector('#player2Name').innerHTML} has won by having less pieces sucked in!`;\n    }\n  } else if (player1Score < player2Score) {\n    result = `${document.body.querySelector('#player1Name').innerHTML} has won by a score of ${player1Score} to ${player2Score}!`;\n  } else {\n    result = `${document.body.querySelector('#player2Name').innerHTML} has won by a score of ${player2Score} to ${player1Score}!`;\n  }\n  document.body.querySelector('#gameStatus').innerHTML = result;\n}\n\n// decide what piece was selected, add them to player list, and then swap player / round\nconst placePiece = async (letter, gameID) => {\n  const game = await getGameState(gameID);\n\n  console.log(game);\n\n  // find piece that was clicked\n  const spaceToAdjust = document.body.querySelector(`#blackHoleSpace${letter}`);\n\n  // set player color to show who placed it / log it for future scoring\n  if (currentPlayer === 1) {\n    spaceToAdjust.style.backgroundColor = '#FF0000';\n    player1Tiles.push(spaceToAdjust);\n    document.body.querySelector(`#player1Piece${round}`).remove();\n  } else {\n    spaceToAdjust.style.backgroundColor = '#0000FF';\n    player2Tiles.push(spaceToAdjust);\n    document.body.querySelector(`#player2Piece${round}`).remove();\n  }\n  // disable future interactions\n  spaceToAdjust.classList.add('isDisabled');\n\n  // remove tile from remaining tiles\n  remainingTiles.splice(remainingTiles.findIndex((tile) => tile.idName === `blackHoleSpace${letter}`), 1);\n\n  // set up needed initialization variables\n  spaceToAdjust.innerHTML = round;\n\n  // flip player control / iterate to next round if needed\n  // round can be used to track what piece need to be used\n  if (currentPlayer === 1) {\n    currentPlayer++;\n    // jump to ai \"move\" if needed\n    if (aiPlaying) {\n      document.body.querySelector('#gameStatus').innerHTML = 'AI is thinking...';\n    } else {\n      document.body.querySelector('#gameStatus').innerHTML = document.body.querySelector('#player2Name').innerHTML;\n      document.body.querySelector('#gameStatus').innerHTML += `, place your ${round} piece.`;\n    }\n  } else if (round === 10) {\n    // if player 2 + round 10, game over.\n    calculateWinner();\n  } else {\n    // start next round and player 1's turn\n    currentPlayer = 1;\n    round++;\n    document.body.querySelector('#gameStatus').innerHTML = document.body.querySelector('#player1Name').innerHTML;\n    document.body.querySelector('#gameStatus').innerHTML += `, place your ${round} piece.`;\n  }\n};\n\nasync function gameLoop(game) {\n  const currentState = getGameState(game.id);\n  // opponent has made a move\n  if (currentState.moveCount !== game.moveCount) {\n    // update game\n  }\n  // set a delay, then check again\n  await _utils_js__WEBPACK_IMPORTED_MODULE_0__.delay(2000);\n  gameLoop(game);\n}\n\n// async function updateGameState(gameID, updatedGameData) {\n//   const formData = `gameID=${gameID}&player=${player.value}&space=${space.value}`;\n\n//   const response = await fetch('/sendMove', {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/x-www-form-urlencoded',\n//       Accept: 'application/json',\n//     },\n//     body: formData,\n//   });\n// }\n\n// load general structure for black hole\nconst blackHoleLoad = async (gameID) => {\n  gameContainer = document.querySelector('#gameContainer');\n\n  // reset game\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.flipScreens();\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.resetGame(gameContainer);\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.createHeader('blackHole');\n\n  // get gamestate\n  const game = await getGameState(gameID);\n\n  console.log(game);\n\n  // set game variables\n  round = Math.floor(game.moveCount / 2) + 1;\n  currentPlayer = (game.moveCount % 2 === 0) ? 1 : 2;\n\n  // set defaults to fill in later\n  remainingTiles = [];\n  player1Tiles = [];\n  player2Tiles = [];\n\n  // create player columns / append them\n  const player1Column = createPlayerColumn('red', round);\n  const player2Column = createPlayerColumn('blue', round);\n  gameContainer.append(player1Column, player2Column);\n\n  // create game board div\n  const blackHoleBoard = document.createElement('div');\n  blackHoleBoard.setAttribute('id', 'blackHoleBoard');\n\n  const blackHoleRows = [];\n\n  for (let i = 0; i < 6; i++) {\n    const blackHoleRow = document.createElement('div');\n    blackHoleRow.setAttribute('class', 'blackHoleRow');\n    blackHoleRows.push(blackHoleRow);\n  }\n\n  // reset black hole storage array\n  blackHoleBoardArray = [\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n  ];\n\n  let rowToInsert = 0;\n  // when value of i hits these marks, insert into next row\n  const rowJumps = [6, 11, 15, 18, 20];\n  // for each space\n  for (let i = 0; i < 21; i++) {\n    // create space\n    const blackHoleSpace = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\n      `blackHoleSpace${String.fromCharCode(65 + i)}`,\n      'blackHoleSpace',\n      '88px',\n      '88px',\n      'gray',\n      String.fromCharCode(65 + i),\n      () => placePiece(String.fromCharCode(65 + i), gameID),\n    );\n\n    blackHoleSpace.createButton();\n\n    // check if previous row full and i need to jump\n    rowToInsert += rowJumps.indexOf(i) !== -1 ? 1 : 0;\n    blackHoleBoardArray[rowToInsert].push(blackHoleSpace.div);\n    blackHoleRows[rowToInsert].appendChild(blackHoleSpace.div);\n\n    // push to track remaining tiles\n    remainingTiles.push(blackHoleSpace);\n  }\n\n  // append all elements to blackholeBoard + add it to container\n  blackHoleRows.forEach((row) => blackHoleBoard.append(row));\n  gameContainer.append(blackHoleBoard);\n\n  console.log(round);\n  console.log(game);\n\n  // sends to individual option screen\n  if (round === 1) {\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.optionPopUp(game);\n    if (document.querySelector('#player2Name') === 'P2ToJoin') {\n      const temp = round;\n      round = temp;\n    }\n  }\n\n  // go to game loop\n  gameLoop(game);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (blackHoleLoad);\n\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/gameLogic.js?");

/***/ }),

/***/ "./src/gameLogic/utils.js":
/*!********************************!*\
  !*** ./src/gameLogic/utils.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closePopUp\": () => (/* binding */ closePopUp),\n/* harmony export */   \"createHeader\": () => (/* binding */ createHeader),\n/* harmony export */   \"delay\": () => (/* binding */ delay),\n/* harmony export */   \"flipScreens\": () => (/* binding */ flipScreens),\n/* harmony export */   \"loadHelpBox\": () => (/* binding */ loadHelpBox),\n/* harmony export */   \"optionPopUp\": () => (/* binding */ optionPopUp),\n/* harmony export */   \"resetGame\": () => (/* binding */ resetGame),\n/* harmony export */   \"setSettings\": () => (/* binding */ setSettings),\n/* harmony export */   \"toggleDiv\": () => (/* binding */ toggleDiv)\n/* harmony export */ });\n/* harmony import */ var _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buttonClass.js */ \"./src/gameLogic/buttonClass.js\");\n\n\n// close popup\nconst closePopUp = () => {\n  // enable container\n  document.body.querySelector('#gameContainer').classList.remove('isDisabled');\n\n  // delete popup / backDim\n  document.querySelector('#backDim').remove();\n  document.querySelector('#popUpContainer').remove();\n};\n\n// load instructions for each game in popup box\nfunction loadHelpBox(game) {\n  // disable all content outside pop up\n  document.body.querySelector('#gameContainer').classList.add('isDisabled');\n\n  // set up darkening of elements\n  const backDim = document.createElement('div');\n  backDim.setAttribute('id', 'backDim');\n\n  // set up actual content of div\n  const popUpContainer = document.createElement('div');\n  popUpContainer.setAttribute('id', 'popUpContainer');\n\n  const closeButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\n    'closeButton',\n    '',\n    '50px',\n    '50px',\n    '',\n    'X',\n    () => closePopUp(),\n  );\n\n  closeButton.createButton();\n\n  // as procedural based on game, don't add content to yet\n  const title = document.createElement('h1');\n  title.setAttribute('id', 'popUpTitle');\n  const gameInstructions = document.createElement('div');\n  gameInstructions.setAttribute('id', 'gameInstructions');\n  gameInstructions.scroll(window.top);\n\n  // display text of popup\n  switch (game) {\n    case 'blackHole':\n      title.textContent = 'Black Hole';\n      gameInstructions.innerHTML = `<h5>In Black Hole, your goal is to have the lowest sum of pieces sucked into the titular \"Black Hole\".<h5>\n              <h3>Game Flow</h3>\n              <p>Each player, going back and forth, places pieces 1-10 in numerical order. Once all 10 pieces are placed by all players,\n              the remaining tile becomes the \"Black Hole\", and sucks in all pieces touching it. The numbers written on the pieces of \n              each player that get sucked in are summed together, and the player with the lowest sum wins. In the event of a tie, the \n              player with the least pieces sucked in wins - if this does not break the tie, the lowest piece with the most value \n              sucked in wins.</p>\n              <h3>Controls</h3>\n              <p>The bottom status bar will say whose turn it is. When it's your turn, click on the tile on the pyramid (labelled with a letter)\n              that you would like to place your next piece. You can always know your next piece to place by looking at your tiles on your side\n              of the screen, under your name - the highest tile up / the lowest-value tile is what you're placing.</p>`;\n      break;\n    case 'credits':\n      title.textContent = 'Credits';\n      gameInstructions.innerHTML = `<h3>Game Created by Walter Joris</h3>\n              <h3>Website Created by Jack Walsh</h3>\n              <a href=\"https://docs.google.com/document/d/1b6NL-ogLaOMzX2hbALHpSkxvjquQrNXEOjGc5KQCoWQ/edit?usp=sharing\" target=\"_blank\">Documentation</a> `;\n      break;\n    default:\n      title.textContent = 'error';\n      gameInstructions.innerHTML = 'If you\\'re seeing this, God has died. Only explanation.';\n      break;\n  }\n\n  // append elements\n  popUpContainer.append(closeButton.div, title, gameInstructions);\n  document.body.append(backDim, popUpContainer);\n}\n\n// toggles div\nfunction toggleDiv(divID) {\n  if (document.querySelector(divID).style.display === 'none') {\n    document.querySelector(divID).style.display = '';\n  } else {\n    document.querySelector(divID).style.display = 'none';\n  }\n}\n\n// push settings to main game\nconst setSettings = (currentGame, fromOptionsMenu) => {\n  const game = currentGame;\n  console.log('set settings');\n  // if value just set\n  if (fromOptionsMenu) {\n    const name = document.querySelector('#playerNameInput').value;\n    // if name space was blank, set as Player X - otherwise, use name\n    game.playerNames[game.moveCount] = name === '' ? `Player ${game.moveCount + 1}` : name;\n  }\n\n  document.body.querySelector('#player1Name').innerHTML = game.playerNames[0];\n  // if player 2 isn't 8 question marks, have it show waiting - else, display name\n  document.body.querySelector('#player2Name').innerHTML = game.playerNames[1] === '????????' ? 'P2ToJoin' : game.playerNames[1];\n\n  document.body.querySelector('#gameStatus').innerHTML = `${game.playerNames[game.moveCount]}, place your 1 piece.`;\n\n  document.body.querySelector('#gameContainer').classList.remove('isDisabled');\n\n  document.querySelector('#backDim').remove();\n  document.querySelector('#popUpContainer').remove();\n};\n\n// open option pop up with relevant info for player\nfunction optionPopUp(game, activePlayer) {\n  // disable all content outside pop up\n  document.body.querySelector('#gameContainer').classList.add('isDisabled');\n\n  // set up darkening of elements\n  const backDim = document.createElement('div');\n  backDim.setAttribute('id', 'backDim');\n\n  // set up actual content of div\n  const popUpContainer = document.createElement('div');\n  popUpContainer.setAttribute('id', 'popUpContainer');\n\n  const options = document.createElement('div');\n  options.setAttribute('id', 'options');\n\n  const playerName = document.createElement('div');\n  playerName.setAttribute('id', 'player1NameContainer');\n\n  const playerNameInput = document.createElement('input');\n  playerNameInput.setAttribute('id', 'playerNameInput');\n  playerNameInput.setAttribute('class', 'nameInput');\n  playerNameInput.setAttribute('type', 'text');\n  playerNameInput.setAttribute('maxlength', '8');\n\n  const playerNameLabel = document.createElement('label');\n  playerNameInput.setAttribute('class', 'label');\n  playerNameLabel.htmlFor = `player${activePlayer === 'Red' ? 1 : 2}NameInput`;\n  playerNameLabel.innerHTML = `Player ${activePlayer === 'Red' ? 1 : 2} Name: `;\n\n  playerName.append(playerNameLabel, playerNameInput);\n  options.append(playerName);\n\n  const enterButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\n    'enterButton',\n    '',\n    '100px',\n    '50px',\n    'gray',\n    'Start Game',\n    () => setSettings(game, true),\n  );\n\n  popUpContainer.append(options, enterButton.createButton());\n  document.body.append(backDim, popUpContainer);\n}\n\n// delays function by delay in milliseconds\nfunction delay(delayInms) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, delayInms);\n  });\n}\n\n// reset div of games\nfunction resetGame(inputGameContainer) {\n  const gameContainer = inputGameContainer;\n  // reset HTML\n  gameContainer.innerHTML = '';\n  gameContainer.className = '';\n\n  gameContainer.classList = '';\n  gameContainer.setAttribute('class', 'blackHoleGameScene');\n}\n\nfunction flipScreens() {\n  toggleDiv('#homeScreen');\n  toggleDiv('#gameContainer');\n}\n\n// capitalize first character of words\nfunction capitalizeFirstChar(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\n// capitalize multiple words\nfunction capitalizeMultipleWords(incomingWords) {\n  let result;\n  let words = incomingWords;\n\n  for (let i = 0; i < words.length; i++) {\n    const letter = words[i];\n    if (letter === letter.toUpperCase()) {\n      // find index of capital\n      const indexOfSpace = words.indexOf(letter.toUpperCase());\n      // splice at word break\n      const wordToCapitalize = words.substring(0, indexOfSpace);\n      // add capped word to result\n      result += `${capitalizeFirstChar(wordToCapitalize)} `;\n      // remove capped word from words string\n      words = words.substring(indexOfSpace, words.length);\n    }\n  }\n\n  // return result and last word remaining capitalized\n  return result + capitalizeFirstChar(words);\n}\n\n// create header for games\nfunction createHeader(game) {\n  // create container\n  const gameContainer = document.querySelector('#gameContainer');\n  const header = document.createElement('div');\n  header.setAttribute('id', 'uiHeader');\n\n  // create back arrow\n  const backButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\n    'backButton',\n    '',\n    '60px',\n    '60px',\n    '',\n    '←',\n    () => flipScreens(),\n  );\n\n  const helpButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\n    'helpButton',\n    '',\n    '120px',\n    '60px',\n    '#FFFF00',\n    `${capitalizeMultipleWords(game)} Rules`,\n    () => loadHelpBox(game),\n  );\n\n  // create title\n  const title = document.createElement('h1');\n  title.setAttribute('id', 'gameTitle');\n  const textNode = document.createTextNode(capitalizeMultipleWords(game));\n  title.appendChild(textNode);\n\n  // append all items\n  header.append(backButton.createButton(), title, helpButton.createButton());\n  gameContainer.append(header);\n}\n\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/scriptTagCode.js");
/******/ 	
/******/ })()
;