/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/scriptTagCode.js":
/*!*********************************!*\
  !*** ./client/scriptTagCode.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_gameLogic_gameLogic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/gameLogic/gameLogic.js */ \"./src/gameLogic/gameLogic.js\");\n\r\n\r\nconst handleResponse = async (response, parseResponse) => {\r\n\t// get game if valid\r\n\tif (response.status === 200 || response.status === 201) {\r\n\t\tlet responseJSON = await response.json();\r\n\t\tlet activePlayer = document.querySelector(\"#playerSelect\").value;\r\n\t\tconsole.log(responseJSON);\r\n\t\treturn (0,_src_gameLogic_gameLogic_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(responseJSON.gameID, activePlayer);\r\n\t}\r\n\r\n\t// get content and then create h1 / p if needed - otherwise, just get them\r\n\tconst gameStatus = document.querySelector(\"#gameStatus\");\r\n\r\n\tconst statusCodes = {\r\n\t400: `<b>Invalid game code. It must be exactly 4 letters.</b>`,\r\n\t404: `Game does not exist. Try creating it!`,\r\n\t409: `Game already exists. Try joining it!`\r\n\t};\r\n\r\n\tgameStatus.innerHTML = statusCodes[response.status]; \r\n};\r\n\r\nconst joinGame = async (joinGameForm) => {\r\n\t// build response for get OR head using url / method consts\r\n\tlet gameID = joinGameForm.querySelector(\"#gameIDField\").value;\r\n\t//let url = `/getGame?gameID=${gameID}`;\r\n\tconsole.log(gameID);\r\n\tlet response = await fetch (\"/getGame?gameID=\" + gameID, {\r\n\t\tmethod: \"GET\",\r\n\t\theaders: {\r\n\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t});\r\n\r\n\t// handle the response\r\n\thandleResponse(response, true);\r\n};\r\n\r\nconst createGame = async (createGameForm) => {\r\n\tlet response = await fetch(\"/createGame\", {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n\t\t'Accept': 'application/json',\r\n\t\t},\r\n\t\tbody: `gameID=${createGameForm.querySelector('#gameIDField').value}`,\r\n\t});\r\n\r\n\t// always print a response for post\r\n\thandleResponse(response, true);\r\n};\r\n\r\nconst init = () => {\r\n\tconst joinGameForm = document.querySelector('#joinGameForm');\r\n\tconst createGameForm = document.querySelector('#createGameForm');\r\n\r\n\t// create functions to override initial form functions\r\n\tconst joinGameFormAction = (e) => {\r\n\te.preventDefault();\r\n\tjoinGame(joinGameForm);\r\n\treturn false;\r\n\t};\r\n\r\n\tconst createGameFormAction = (e) => {\r\n\te.preventDefault();\r\n\tcreateGame(createGameForm);\r\n\treturn false;\r\n\t};\r\n\r\n\t// attach evt listeners to forms\r\n\tjoinGameForm.addEventListener('submit', joinGameFormAction);\r\n\tcreateGameForm.addEventListener('submit', createGameFormAction);\r\n\r\n\tdocument.querySelector(\"#gameContainer\").style.display = \"none\";\r\n\r\n\tconst gameStatus = document.querySelector(\"#gameStatus\");\r\n\r\n\tgameStatus.innerHTML = \"Create an existing game using 4 letters OR join one that already exists!\";\r\n};\r\nwindow.onload = init;\n\n//# sourceURL=webpack://430-project-1/./client/scriptTagCode.js?");

/***/ }),

/***/ "./src/gameLogic/buttonClass.js":
/*!**************************************!*\
  !*** ./src/gameLogic/buttonClass.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Button)\n/* harmony export */ });\n// creates button\n// functionName = function that button calls when pressed\n\n/* eslint-env global */\n\nclass Button {\n  constructor(idName, className, width, height, backgroundColor, text, onclick) {\n    this.idName = idName;\n    this.className = className;\n    this.width = width;\n    this.height = height;\n    this.backgroundColor = backgroundColor;\n    this.text = text;\n    this.onclick = onclick;\n    this.div = '';\n  }\n\n  // creates button\n  createButton() {\n    // if not already made\n    if (!this.div) {\n      // set up container\n      const button = document.createElement('div');\n\n      // input elements\n      if (this.idName) {\n        button.setAttribute('id', this.idName);\n      }\n      if (this.className) {\n        button.setAttribute('class', this.className);\n      }\n      if (this.onclick) {\n        button.addEventListener('click', (evt) => {\n          this.onclick(evt);\n        });\n      }\n\n      // set dimensions / color\n      button.style.width = this.width;\n      button.style.height = this.height;\n      button.style.backgroundColor = this.backgroundColor;\n\n      // create text\n      const textnode = document.createTextNode(this.text);\n      button.appendChild(textnode);\n\n      // log button\n      this.div = button;\n    }\n\n    // return button - also works as getter\n    return this.div;\n  }\n}\n\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/buttonClass.js?");

/***/ }),

/***/ "./src/gameLogic/gameLogic.js":
/*!************************************!*\
  !*** ./src/gameLogic/gameLogic.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/gameLogic/utils.js\");\n/* harmony import */ var _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buttonClass.js */ \"./src/gameLogic/buttonClass.js\");\n\n\n\n// global containers needed\nlet gameContainer = document.querySelector('#gameContainer');\n\n// global variables for games\nlet round;\nlet remainingTiles = [];\nlet blackHoleBoardArray;\n\nfunction createPlayerColumn(player, currentRound) {\n  const redPlayer = {\n    playerNum: 1,\n    color: '#FF0000',\n  };\n\n  const bluePlayer = {\n    playerNum: 2,\n    color: '#0000FF',\n  };\n\n  const piecesRequested = player === 'red' ? redPlayer : bluePlayer;\n\n  // create player pieces / container\n  const playerColumn = document.createElement('div');\n  playerColumn.setAttribute('id', `player${piecesRequested.playerNum}Pieces`);\n  playerColumn.setAttribute('class', 'playerColumn');\n\n  const playerName = document.createElement('p');\n  playerName.setAttribute('id', `player${piecesRequested.playerNum}Name`);\n  playerName.setAttribute('class', 'playerName');\n  playerName.innerHTML = 'Player';\n  playerColumn.appendChild(playerName);\n\n  // only create as many pieces as physically available\n  for (let i = currentRound; i < 11; i++) {\n    // create space\n    const numTile = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\n      `player${piecesRequested.playerNum}Piece${i}`,\n      `playerPiece player${piecesRequested.playerNum}Piece`,\n      '65px',\n      '65px',\n      piecesRequested.color,\n      i,\n      '',\n    );\n\n    playerColumn.appendChild(numTile.createButton());\n  }\n  return playerColumn;\n}\n\nfunction calculateWinner(game) {\n  let blackHole;\n  const playerScoreTiles = [[], []];\n  let player1Score = 0;\n  let player2Score = 0;\n  let result;\n  \n  console.log(game);\n\n  for (let i = 0; i < game.gameState.length; i++) {\n    if (game.gameState[i].length === 1) {\n      blackHole = game.gameState[i];\n      break;\n    }\n  }\n\n  console.log(blackHole);\n\n  const suckedInTilesDict = {\n    A: [1, 6],\n    B: [0, 2, 6, 7],\n    C: [1, 3, 7, 8],\n    D: [2, 4, 8, 9],\n    E: [3, 5, 9, 10],\n    F: [4, 10],\n    G: [0, 1, 7, 11],\n    H: [1, 2, 6, 8, 11, 12],\n    I: [2, 3, 7, 9, 12, 13],\n    J: [3, 4, 8, 10, 13, 14],\n    K: [4, 5, 9, 14],\n    L: [6, 7, 12, 15],\n    M: [7, 8, 11, 13, 15, 16],\n    N: [8, 9, 12, 14, 16, 17],\n    O: [9, 10, 13, 17],\n    P: [11, 12, 16, 18],\n    Q: [12, 13, 15, 17, 18, 19],\n    R: [13, 14, 16, 19],\n    S: [15, 16, 19, 20],\n    T: [16, 17, 18, 20],\n    U: [18, 19],\n  };\n\n  const suckedInTiles = suckedInTilesDict[blackHole];\n\n  console.log(suckedInTiles);\n\n  for (let i = 0; i < suckedInTiles.length; i++) {\n    const tileToCheck = game.gameState[suckedInTiles[i]];\n    console.log(tileToCheck);\n    playerScoreTiles[tileToCheck[0] === 'R' ? 0 : 1].push(tileToCheck.splice(1));\n  }\n\n  const player1ScoreTiles = playerScoreTiles[0];\n  const player2ScoreTiles = playerScoreTiles[1];\n\n  for (let i = 0; i < player1ScoreTiles; i++) {\n    player1Score += parseInt(player1ScoreTiles[i], 10);\n  }\n\n  for (let i = 0; i < player2ScoreTiles; i++) {\n    player2Score += parseInt(player2ScoreTiles[i], 10);\n  }\n\n  // check win conditions\n  // if the score is higher\n  if (player1Score === player2Score) {\n    // tiebreaker 1: if less tiles sucked in\n    if (player1ScoreTiles.length === player2ScoreTiles.length) {\n      // tiebreaker 2: sort tiles and check which piece is the lowest\n      // if they're exactly equal - tie\n      player1ScoreTiles.sort((a, b) => b - a);\n      player2ScoreTiles.sort((a, b) => b - a);\n      for (let i = 0; i < player1ScoreTiles.length; i++) {\n        if (player1ScoreTiles[i] !== player2ScoreTiles[i]) {\n          const p1Win = player1ScoreTiles[i] < player2ScoreTiles[i];\n          result = `${document.body.querySelector(`#player${p1Win ? 1 : 2}Name`).innerHTML} has won\n           by having a ${p1Win ? player1ScoreTiles[i] : player2ScoreTiles[i]} vs a\n            ${p1Win ? player2ScoreTiles[i] : player1ScoreTiles[i]} sucked in!`;\n        }\n        // everything else is just a result being stored and printed\n      }\n      if (!result) {\n        result = 'This game is a perfect tie!';\n      }\n    } else {\n      const p1Win = player1ScoreTiles.length < player2ScoreTiles.length;\n      result = `${document.body.querySelector(`#player${p1Win ? 1 : 2}Name`).innerHTML} has won by having less pieces sucked in!`;\n    }\n  } else {\n    const p1Win = player1Score < player2Score;\n    result = `${document.body.querySelector(`#player${p1Win ? 1 : 2}Name`).innerHTML} has won by a score of ${player1Score} to ${player2Score}!`;\n    document.body.querySelector('#gameStatus').innerHTML = result;\n  }\n}\n\n// decide what piece was selected, add them to player list, and then swap player / round\nconst updateGameState = (currentState, activePlayer) => {\n  // check for needed updates for all spaces\n  for (let i = 0; i < 21; i++) {\n    const spaceToAdjust = document.querySelector(`#blackHoleSpace${String.fromCharCode(65 + i)}`);\n    // check if game piece needs to be colored in\n    if (spaceToAdjust.style.backgroundColor === 'gray'\n     && currentState.gameState[i] !== `${String.fromCharCode(65 + i).toUpperCase()}`) {\n      console.log(`difference on tile ${String.fromCharCode(65 + i)}`);\n      const color = currentState.gameState[i].substring(0, 1);\n      const number = currentState.gameState[i].substring(1);\n      round = Math.floor(currentState.moveCount / 2) + 1;\n\n      // update button\n      spaceToAdjust.style.backgroundColor = color === 'R' ? '#FF0000' : '#0000FF';\n      spaceToAdjust.innerHTML = number;\n      spaceToAdjust.classList.add('isDisabled');\n\n      document.body.querySelector(`#player${color === 'R' ? 1 : 2}Piece${round}`).remove();\n      remainingTiles.splice(remainingTiles.findIndex((tile) => tile.idName === `blackHoleSpace${String.fromCharCode(65 + i)}`), 1);\n    }\n  }\n\n  if (currentState.moveCount === 20) {\n    calculateWinner(currentState);\n  } else {\n    const nextMove = currentState.moveCount % 2 === 0 ? 'Red' : 'Blue';\n    let statusMessage = '';\n    if (nextMove === activePlayer) {\n      // say \"it's your turn\"\n      console.log('not active player');\n      statusMessage = `${currentState.playerNames[currentState.moveCount % 2]}, place your ${round} piece.`;\n    } else {\n      // get other player's name and say it's their turn\n      console.log('active player');\n      let playerToGo = currentState.playerNames[nextMove === 'Red' ? 0 : 1];\n      if (playerToGo === '????????') {\n        playerToGo = 'second player to join and';\n      } else {\n        playerToGo += ' to';\n      }\n      statusMessage = `Waiting on ${playerToGo} place their ${round} piece.`;\n    }\n    document.body.querySelector('#gameStatus').innerHTML = statusMessage;\n  }\n\n  console.log(currentState);\n  return currentState;\n};\n\n// decide what piece was selected, add them to player list, and then swap player / round\n// auto-fires updateGameState\nconst placePiece = async (letter, gameID, activePlayer) => {\n  const formData = `gameID=${gameID}&player=${activePlayer}&space=${letter}`;\n\n  const response = await fetch('/sendMove', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'application/json',\n    },\n    body: formData,\n  });\n\n  // piece updated\n  if (response.status === 201) {\n    const currentState = await _utils_js__WEBPACK_IMPORTED_MODULE_0__.getGameState(gameID);\n    updateGameState(currentState, activePlayer);\n  } else { // player has tried to make illegal move\n    const gameStatusHTML = document.body.querySelector('#gameStatus').innerHTML;\n    const tempStorage = gameStatusHTML.slice(gameStatusHTML.indexOf('W'));\n    document.body.querySelector('#gameStatus').innerHTML = `It is not your turn. Please wait for the other player to go.<br>${tempStorage}`;\n  }\n};\n\nasync function gameLoop(game, activePlayer) {\n  const currentState = await _utils_js__WEBPACK_IMPORTED_MODULE_0__.getGameState(game.id);\n  let updatedState = '';\n  // opponent has made a move\n  if (currentState.moveCount !== game.moveCount) {\n    console.log('change in game state');\n    updatedState = await updateGameState(currentState, activePlayer);\n  }\n\n  if ((updatedState !== '' && updatedState.moveCount === 20) || currentState.moveCount === 20) {\n    calculateWinner(updatedState !== '' ? updatedState : currentState);\n  }\n  // set a delay, then check again\n  await _utils_js__WEBPACK_IMPORTED_MODULE_0__.delay(100);\n  // send game if no change - else, send updatedState to replace game\n  gameLoop(updatedState !== '' ? updatedState : game, activePlayer);\n}\n\n// load general structure for black hole\nconst blackHoleLoad = async (gameID, activePlayer) => {\n  gameContainer = document.querySelector('#gameContainer');\n\n  // reset game\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.flipScreens();\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.resetGame(gameContainer);\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.createHeader('blackHole');\n\n  // get gamestate\n  const game = await _utils_js__WEBPACK_IMPORTED_MODULE_0__.getGameState(gameID);\n\n  console.log(game);\n\n  // set game variables\n  round = Math.floor(game.moveCount / 2) + 1;\n\n  // set defaults to fill in later\n  remainingTiles = [];\n\n  // create player columns / append them\n  const player1Column = createPlayerColumn('red', round);\n  const player2Column = createPlayerColumn('blue', round);\n  gameContainer.append(player1Column, player2Column);\n\n  // create game board div\n  const blackHoleBoard = document.createElement('div');\n  blackHoleBoard.setAttribute('id', 'blackHoleBoard');\n\n  const blackHoleRows = [];\n\n  for (let i = 0; i < 6; i++) {\n    const blackHoleRow = document.createElement('div');\n    blackHoleRow.setAttribute('class', 'blackHoleRow');\n    blackHoleRows.push(blackHoleRow);\n  }\n\n  // reset black hole storage array\n  blackHoleBoardArray = [\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n  ];\n\n  let rowToInsert = 0;\n  // when value of i hits these marks, insert into next row\n  const rowJumps = [6, 11, 15, 18, 20];\n  // for each space\n  for (let i = 0; i < 21; i++) {\n    const currentSpace = game.gameState[i];\n    let color = 'gray';\n    let number = String.fromCharCode(65 + i);\n\n    // if value already there\n    if (currentSpace.length > 1) {\n      color = currentSpace.substring(0, 1) === 'R' ? '#FF0000' : '#0000FF';\n      number = currentSpace.substring(1);\n    }\n\n    // create space\n    const blackHoleSpace = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\n      `blackHoleSpace${String.fromCharCode(65 + i)}`,\n      'blackHoleSpace',\n      '88px',\n      '88px',\n      color,\n      number,\n      () => placePiece(String.fromCharCode(65 + i), gameID, activePlayer),\n    );\n\n    blackHoleSpace.createButton();\n\n    // check if previous row full and i need to jump\n    rowToInsert += rowJumps.indexOf(i) !== -1 ? 1 : 0;\n    blackHoleBoardArray[rowToInsert].push(blackHoleSpace.div);\n    blackHoleRows[rowToInsert].appendChild(blackHoleSpace.div);\n\n    // push to track remaining tiles\n    remainingTiles.push(blackHoleSpace);\n  }\n\n  // append all elements to blackholeBoard + add it to container\n  blackHoleRows.forEach((row) => blackHoleBoard.append(row));\n  gameContainer.append(blackHoleBoard);\n\n  for (let i = 0; i < 21; i++) {\n    const boardSpace = document.querySelector(`#blackHoleSpace${String.fromCharCode(65 + i)}`);\n    if (boardSpace.style.backgroundColor !== 'gray') {\n      console.log('piece disabled');\n      boardSpace.classList.add('isDisabled');\n    }\n  }\n\n  // just show result\n  if (!game.active) {\n    calculateWinner(game);\n  }\n  // if needed, prompt for player name -\n  // else, just jump to set settings\n  if ((game.moveCount === 0 && activePlayer === 'Red')\n  || (game.moveCount === 1 && activePlayer === 'Blue')) {\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.optionPopUp(game, activePlayer);\n  } else {\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.setSettings(game, false, activePlayer);\n  }\n\n  // go to game loop\n  gameLoop(game, activePlayer);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (blackHoleLoad);\n\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/gameLogic.js?");

/***/ }),

/***/ "./src/gameLogic/utils.js":
/*!********************************!*\
  !*** ./src/gameLogic/utils.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closePopUp\": () => (/* binding */ closePopUp),\n/* harmony export */   \"createHeader\": () => (/* binding */ createHeader),\n/* harmony export */   \"delay\": () => (/* binding */ delay),\n/* harmony export */   \"flipScreens\": () => (/* binding */ flipScreens),\n/* harmony export */   \"getGameState\": () => (/* binding */ getGameState),\n/* harmony export */   \"loadHelpBox\": () => (/* binding */ loadHelpBox),\n/* harmony export */   \"optionPopUp\": () => (/* binding */ optionPopUp),\n/* harmony export */   \"resetGame\": () => (/* binding */ resetGame),\n/* harmony export */   \"setSettings\": () => (/* binding */ setSettings),\n/* harmony export */   \"toggleDiv\": () => (/* binding */ toggleDiv)\n/* harmony export */ });\n/* harmony import */ var _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buttonClass.js */ \"./src/gameLogic/buttonClass.js\");\n\n\n// gets current game state and returns game obj from json\nasync function getGameState(gameID) {\n  const response = await fetch(`/getGameState?gameID=${gameID}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n    },\n  });\n\n  const json = await response.json();\n  return json.game;\n}\n\n// close popup\nconst closePopUp = () => {\n  // enable container\n  document.body.querySelector('#gameContainer').classList.remove('isDisabled');\n\n  // delete popup / backDim\n  document.querySelector('#backDim').remove();\n  document.querySelector('#popUpContainer').remove();\n};\n\n// load instructions for each game in popup box\nfunction loadHelpBox(game) {\n  // disable all content outside pop up\n  document.body.querySelector('#gameContainer').classList.add('isDisabled');\n\n  // set up darkening of elements\n  const backDim = document.createElement('div');\n  backDim.setAttribute('id', 'backDim');\n\n  // set up actual content of div\n  const popUpContainer = document.createElement('div');\n  popUpContainer.setAttribute('id', 'popUpContainer');\n\n  const closeButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\n    'closeButton',\n    '',\n    '50px',\n    '50px',\n    '',\n    'X',\n    () => closePopUp(),\n  );\n\n  closeButton.createButton();\n\n  // as procedural based on game, don't add content to yet\n  const title = document.createElement('h1');\n  title.setAttribute('id', 'popUpTitle');\n  const gameInstructions = document.createElement('div');\n  gameInstructions.setAttribute('id', 'gameInstructions');\n  gameInstructions.scroll(window.top);\n\n  // display text of popup\n  switch (game) {\n    case 'blackHole':\n      title.textContent = 'Black Hole';\n      gameInstructions.innerHTML = `<h5>In Black Hole, your goal is to have the lowest sum of pieces sucked into the titular \"Black Hole\".<h5>\n              <h3>Game Flow</h3>\n              <p>Each player, going back and forth, places pieces 1-10 in numerical order. Once all 10 pieces are placed by all players,\n              the remaining tile becomes the \"Black Hole\", and sucks in all pieces touching it. The numbers written on the pieces of \n              each player that get sucked in are summed together, and the player with the lowest sum wins. In the event of a tie, the \n              player with the least pieces sucked in wins - if this does not break the tie, the lowest piece with the most value \n              sucked in wins.</p>\n              <h3>Controls</h3>\n              <p>The bottom status bar will say whose turn it is. When it's your turn, click on the tile on the pyramid (labelled with a letter)\n              that you would like to place your next piece. You can always know your next piece to place by looking at your tiles on your side\n              of the screen, under your name - the highest tile up / the lowest-value tile is what you're placing.</p>`;\n      break;\n    case 'credits':\n      title.textContent = 'Credits';\n      gameInstructions.innerHTML = `<h3>Game Created by Walter Joris</h3>\n              <h3>Website Created by Jack Walsh</h3>\n              <a href=\"https://docs.google.com/document/d/1b6NL-ogLaOMzX2hbALHpSkxvjquQrNXEOjGc5KQCoWQ/edit?usp=sharing\" target=\"_blank\">Documentation</a> `;\n      break;\n    default:\n      title.textContent = 'error';\n      gameInstructions.innerHTML = 'If you\\'re seeing this, God has died. Only explanation.';\n      break;\n  }\n\n  // append elements\n  popUpContainer.append(closeButton.div, title, gameInstructions);\n  document.body.append(backDim, popUpContainer);\n}\n\n// toggles div\nfunction toggleDiv(divID) {\n  if (document.querySelector(divID).style.display === 'none') {\n    document.querySelector(divID).style.display = '';\n  } else {\n    document.querySelector(divID).style.display = 'none';\n  }\n}\n\n// push settings to main game\nconst setSettings = async (currentGame, fromOptionsMenu, activePlayer) => {\n  let game = currentGame;\n  console.log('set settings');\n  // if value just set\n  if (fromOptionsMenu) {\n    const name = document.querySelector('#playerNameInput').value;\n    // if name space was blank, set as Player X - otherwise, use name\n    const formData = `gameID=${currentGame.id}&player=${activePlayer}&name=${\n      name === '' ? `Player ${game.moveCount + 1}` : name}`;\n\n    // set player name in game obj\n    await fetch('/sendPlayerName', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: formData,\n    });\n\n    // update game\n    game = await getGameState(game.id);\n\n    document.body.querySelector('#gameContainer').classList.remove('isDisabled');\n    document.querySelector('#backDim').remove();\n    document.querySelector('#popUpContainer').remove();\n  }\n\n  document.body.querySelector('#player1Name').innerHTML = game.playerNames[0];\n  // if player 2 isn't 8 question marks, have it show waiting - else, display name\n  document.body.querySelector('#player2Name').innerHTML = game.playerNames[1] === '????????' ? 'P2ToJoin' : game.playerNames[1];\n\n  if (game.moveCount === 20) {\n    // display final results\n  } else {\n    const nextMove = game.moveCount % 2 === 0 ? 'Red' : 'Blue';\n    let statusMessage = '';\n    if (nextMove === activePlayer) {\n    // say \"it's your turn\"\n      console.log('active player');\n      statusMessage = `${game.playerNames[game.moveCount % 2]}, place your ${Math.floor(game.moveCount / 2) + 1} piece.`;\n    } else {\n    // get other player's name and say it's their turn\n      console.log('not active player');\n      let playerToGo = game.playerNames[nextMove === 'Red' ? 0 : 1];\n      if (playerToGo === '????????') {\n        playerToGo = 'second player to join and';\n      } else {\n        playerToGo += ' to';\n      }\n      statusMessage = `Waiting on ${playerToGo} place their ${Math.floor(game.moveCount / 2) + 1} piece.`;\n    }\n\n    document.body.querySelector('#gameStatus').innerHTML = statusMessage;\n  }\n};\n\n// open option pop up with relevant info for player\nfunction optionPopUp(game, activePlayer) {\n  // disable all content outside pop up\n  document.body.querySelector('#gameContainer').classList.add('isDisabled');\n\n  // set up darkening of elements\n  const backDim = document.createElement('div');\n  backDim.setAttribute('id', 'backDim');\n\n  // set up actual content of div\n  const popUpContainer = document.createElement('div');\n  popUpContainer.setAttribute('id', 'popUpContainer');\n\n  const options = document.createElement('div');\n  options.setAttribute('id', 'options');\n\n  const playerName = document.createElement('div');\n  playerName.setAttribute('id', 'player1NameContainer');\n\n  const playerNameInput = document.createElement('input');\n  playerNameInput.setAttribute('id', 'playerNameInput');\n  playerNameInput.setAttribute('class', 'nameInput');\n  playerNameInput.setAttribute('type', 'text');\n  playerNameInput.setAttribute('maxlength', '8');\n\n  const playerNameLabel = document.createElement('label');\n  playerNameInput.setAttribute('class', 'label');\n  playerNameLabel.htmlFor = `player${activePlayer === 'Red' ? 1 : 2}NameInput`;\n  playerNameLabel.innerHTML = `Player ${activePlayer === 'Red' ? 1 : 2} Name: `;\n\n  playerName.append(playerNameLabel, playerNameInput);\n  options.append(playerName);\n\n  const enterButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\n    'enterButton',\n    '',\n    '100px',\n    '50px',\n    'gray',\n    'Start Game',\n    () => setSettings(game, true, activePlayer),\n  );\n\n  popUpContainer.append(options, enterButton.createButton());\n  document.body.append(backDim, popUpContainer);\n}\n\n// delays function by delay in milliseconds\nfunction delay(delayInms) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, delayInms);\n  });\n}\n\n// reset div of games\nfunction resetGame(inputGameContainer) {\n  const gameContainer = inputGameContainer;\n  // reset HTML\n  gameContainer.innerHTML = '';\n  gameContainer.className = '';\n\n  gameContainer.classList = '';\n  gameContainer.setAttribute('class', 'blackHoleGameScene');\n}\n\nfunction flipScreens() {\n  toggleDiv('#homeScreen');\n  toggleDiv('#gameContainer');\n  const gameStatus = document.querySelector('#gameStatus');\n  gameStatus.innerHTML = 'Create an existing game using 4 letters OR join one that already exists!';\n}\n\n// capitalize first character of words\nfunction capitalizeFirstChar(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\n// capitalize multiple words\nfunction capitalizeMultipleWords(incomingWords) {\n  let result = '';\n  let words = incomingWords;\n\n  for (let i = 0; i < words.length; i++) {\n    const letter = words[i];\n    if (letter === letter.toUpperCase()) {\n      // find index of capital\n      const indexOfSpace = words.indexOf(letter.toUpperCase());\n      // splice at word break\n      const wordToCapitalize = words.substring(0, indexOfSpace);\n      // add capped word to result\n      result += `${capitalizeFirstChar(wordToCapitalize)} `;\n      // remove capped word from words string\n      words = words.substring(indexOfSpace, words.length);\n    }\n  }\n\n  // return result and last word remaining capitalized\n  return result + capitalizeFirstChar(words);\n}\n\n// create header for games\nfunction createHeader(game) {\n  // create container\n  const gameContainer = document.querySelector('#gameContainer');\n  const header = document.createElement('div');\n  header.setAttribute('id', 'uiHeader');\n\n  // create back arrow\n  const backButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\n    'backButton',\n    '',\n    '60px',\n    '60px',\n    '',\n    '←',\n    () => flipScreens(),\n  );\n\n  const helpButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\n    'helpButton',\n    '',\n    '120px',\n    '60px',\n    '#FFFF00',\n    `${capitalizeMultipleWords(game)} Rules`,\n    () => loadHelpBox(game),\n  );\n\n  // create title\n  const title = document.createElement('h1');\n  title.setAttribute('id', 'gameTitle');\n  const textNode = document.createTextNode(capitalizeMultipleWords(game));\n  title.appendChild(textNode);\n\n  // append all items\n  header.append(backButton.createButton(), title, helpButton.createButton());\n  gameContainer.append(header);\n}\n\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/scriptTagCode.js");
/******/ 	
/******/ })()
;