/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/scriptTagCode.js":
/*!*********************************!*\
  !*** ./client/scriptTagCode.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const handleResponse = async (response, parseResponse) => {\r\n\tconst gameLoad = __webpack_require__(/*! ../src/gameLogic/gameLogic.js */ \"./src/gameLogic/gameLogic.js\");\r\n\tif (response.status === 200 || response.status === 201) {\r\n\t\treturn gameLoad.blackHoleLoad(gameID);\r\n\t}\r\n\t// get json back\r\n\tlet h1;\r\n\tlet p;\r\n\r\n\t// get content and then create h1 / p if needed - otherwise, just get them\r\n\tconst content = document.querySelector('#result');\r\n\th1 = document.querySelector('#h1');\r\n\tp = document.querySelector('#p');\r\n\r\n\tconst statusCodes = {\r\n\t200: `<b>Success</b>`,\r\n\t201: `<b>Created</b>`,\r\n\t204: `<b>Updated (No Content)</b>`,\r\n\t400: `<b>Bad Request</b>`,\r\n\t404: `<b>Not Found</b>`,\r\n\t409: `<b>Data Conflict</b>`\r\n\t};\r\n\r\n\th1.innerHTML = statusCodes[response.status];\r\n\tif (parseResponse && response.status !== 204) {\r\n\tconst parsedResponse = await response.json();\r\n\r\n\t// if the message is good (aka is the users obj)\r\n\t// then display that\r\n\t// otherwise, display the error\r\n\tp.innerHTML = response.status === 200 \r\n\t? JSON.stringify(parsedResponse.message)\r\n\t: `Message: ${JSON.stringify(parsedResponse.message)}`;\r\n\t} else {\r\n\tp.innerHTML = \"\";\r\n\t}\r\n\r\n\t//Add the elements to the screen.\r\n\tcontent.appendChild(h1);\r\n\tcontent.appendChild(p);    \r\n};\r\n\r\nconst joinGame = async (joinGameForm) => {\r\n\t// build response for get OR head using url / method consts\r\n\tlet gameID = joinGameForm.querySelector(\"#gameIDField\").value;\r\n\t//let url = `/getGame?gameID=${gameID}`;\r\n\tconsole.log(gameID);\r\n\tlet response = await fetch (\"/getGame?gameID=\" + gameID, {\r\n\t\tmethod: \"GET\",\r\n\t\theaders: {\r\n\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t});\r\n\r\n\t// handle the response\r\n\thandleResponse(response, true);\r\n};\r\n\r\nconst createGame = async (createGameForm) => {\r\n\tlet response = await fetch(\"/createGame\", {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n\t\t'Accept': 'application/json',\r\n\t\t},\r\n\t\tbody: `gameID=${createGameForm.querySelector('#gameIDField').value}`,\r\n\t});\r\n\r\n\t// always print a response for post\r\n\thandleResponse(response, true);\r\n};\r\n\r\nconst init = () => {\r\n\tconst joinGameForm = document.querySelector('#joinGameForm');\r\n\tconst createGameForm = document.querySelector('#createGameForm');\r\n\r\n\t// create functions to override initial form functions\r\n\tconst joinGameFormAction = (e) => {\r\n\te.preventDefault();\r\n\tjoinGame(joinGameForm);\r\n\treturn false;\r\n\t};\r\n\r\n\tconst createGameFormAction = (e) => {\r\n\te.preventDefault();\r\n\tcreateGame(createGameForm);\r\n\treturn false;\r\n\t};\r\n\r\n\t// attach evt listeners to forms\r\n\tjoinGameForm.addEventListener('submit', joinGameFormAction);\r\n\tcreateGameForm.addEventListener('submit', createGameFormAction);\r\n\r\n\tconst h1 = document.querySelector(\"#h1\");\r\n\r\n\th1.innerHTML = \"script tag worked!\";\r\n};\r\n\r\nwindow.onload = init;\n\n//# sourceURL=webpack://430-project-1/./client/scriptTagCode.js?");

/***/ }),

/***/ "./src/gameLogic/gameLogic.js":
/*!************************************!*\
  !*** ./src/gameLogic/gameLogic.js ***!
  \************************************/
/***/ ((module) => {

eval("// global containers needed\r\nlet textNode;\r\nlet gameContainer;\r\n\r\n// global variables for games\r\nlet currentPlayer;\r\nlet round;\r\nlet aiPlaying;\r\nlet remainingTiles = [];\r\nlet player1Tiles = [];\r\nlet player2Tiles = [];\r\n\r\nlet blackHoleBoardArray;\r\n  \r\n\r\n  // load general structure for black hole\r\n  const blackHoleLoad = async (gameID) => {\r\n    // reset game\r\n    resetGame('blackHole');\r\n    createHeader('blackHole');\r\n\r\n    // get gamestate\r\n    let response = await fetch (\"/getGameState?gameID=\" + gameID, {\r\n      method: \"GET\",\r\n      headers: {\r\n      'Accept': 'application/json'\r\n      },\r\n    });\r\n\r\n    let game = response.game;\r\n\r\n    // set initial game variables\r\n    round = Math.floor(game.moveCount / 2) + 1;\r\n    currentPlayer = (game.moveCount % 2 === 0) ? 1 : 2;\r\n    remainingTiles = [];\r\n    player1Tiles = [];\r\n    player2Tiles = [];\r\n  \r\n    // create player 1 pieces / container\r\n    const player1Pieces = document.createElement('div');\r\n    player1Pieces.setAttribute('id', 'player1Pieces');\r\n    player1Pieces.setAttribute('class', 'playerPieces');\r\n  \r\n    const player1Name = document.createElement('p');\r\n    player1Name.setAttribute('id', 'player1Name');\r\n    player1Name.setAttribute('class', 'playerName');\r\n    player1Name.innerHTML = 'Player';\r\n    player1Pieces.appendChild(player1Name);\r\n  \r\n    for (let i = 1; i < 11; i++) {\r\n      // create space\r\n      const playerPiece = new Button(\r\n        `player1Piece${i}`,\r\n        'playerPiece player1Piece',\r\n        '65px',\r\n        '65px',\r\n        '#FF0000',\r\n        i,\r\n        '',\r\n      );\r\n  \r\n      player1Pieces.appendChild(playerPiece.createButton());\r\n    }\r\n  \r\n    // create player 2 pieces / container\r\n    const player2Pieces = document.createElement('div');\r\n    player2Pieces.setAttribute('id', 'player2Pieces');\r\n    player2Pieces.setAttribute('class', 'playerPieces');\r\n  \r\n    const player2Name = document.createElement('p');\r\n    player2Name.setAttribute('id', 'player2Name');\r\n    player2Name.setAttribute('class', 'playerName');\r\n    player2Name.innerHTML = 'Player';\r\n    player2Pieces.appendChild(player2Name);\r\n  \r\n    for (let i = 1; i < 11; i++) {\r\n      // create space\r\n      const playerPiece = new Button(\r\n        `player2Piece${i}`,\r\n        'playerPiece player2Piece',\r\n        '65px',\r\n        '65px',\r\n        '#0000FF',\r\n        i,\r\n        '',\r\n      );\r\n  \r\n      player2Pieces.appendChild(playerPiece.createButton());\r\n    }\r\n  \r\n    // append containers\r\n    gameContainer.append(player1Pieces, player2Pieces);\r\n  \r\n    // create game board div\r\n    const blackHoleBoard = document.createElement('div');\r\n    blackHoleBoard.setAttribute('id', 'blackHoleBoard');\r\n  \r\n    // create rows of game board\r\n    const blackHoleRow1 = document.createElement('div');\r\n    blackHoleRow1.setAttribute('class', 'blackHoleRow');\r\n    const blackHoleRow2 = document.createElement('div');\r\n    blackHoleRow2.setAttribute('class', 'blackHoleRow');\r\n    const blackHoleRow3 = document.createElement('div');\r\n    blackHoleRow3.setAttribute('class', 'blackHoleRow');\r\n    const blackHoleRow4 = document.createElement('div');\r\n    blackHoleRow4.setAttribute('class', 'blackHoleRow');\r\n    const blackHoleRow5 = document.createElement('div');\r\n    blackHoleRow5.setAttribute('class', 'blackHoleRow');\r\n    const blackHoleRow6 = document.createElement('div');\r\n    blackHoleRow6.setAttribute('class', 'blackHoleRow');\r\n  \r\n    // reset black hole storage array\r\n    blackHoleBoardArray = [\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n      [],\r\n    ];\r\n  \r\n    // for each space\r\n    for (let i = 0; i < 21; i++) {\r\n      // create space\r\n      const blackHoleSpace = new Button(\r\n        `blackHoleSpace${String.fromCharCode(65 + i)}`,\r\n        'blackHoleSpace',\r\n        '88px',\r\n        '88px',\r\n        'gray',\r\n        String.fromCharCode(65 + i),\r\n        `placePiece('${String.fromCharCode(65 + i)}')`,\r\n      );\r\n  \r\n      blackHoleSpace.createButton();\r\n  \r\n      // sort into pyramid structure\r\n      if (blackHoleBoardArray[0].length < 6) {\r\n        blackHoleBoardArray[0].push(blackHoleSpace.div);\r\n        blackHoleRow1.appendChild(blackHoleSpace.div);\r\n      } else if (blackHoleBoardArray[1].length < 5) {\r\n        blackHoleBoardArray[1].push(blackHoleSpace.div);\r\n        blackHoleRow2.appendChild(blackHoleSpace.div);\r\n      } else if (blackHoleBoardArray[2].length < 4) {\r\n        blackHoleBoardArray[2].push(blackHoleSpace.div);\r\n        blackHoleRow3.appendChild(blackHoleSpace.div);\r\n      } else if (blackHoleBoardArray[3].length < 3) {\r\n        blackHoleBoardArray[3].push(blackHoleSpace.div);\r\n        blackHoleRow4.appendChild(blackHoleSpace.div);\r\n      } else if (blackHoleBoardArray[4].length < 2) {\r\n        blackHoleBoardArray[4].push(blackHoleSpace.div);\r\n        blackHoleRow5.appendChild(blackHoleSpace.div);\r\n      } else {\r\n        blackHoleBoardArray[5].push(blackHoleSpace.div);\r\n        blackHoleRow6.appendChild(blackHoleSpace.div);\r\n      }\r\n  \r\n      // push to track remaining tiles\r\n      remainingTiles.push(blackHoleSpace);\r\n    }\r\n  \r\n    // append all elements to blackholeBoard + add it to container\r\n    blackHoleBoard.append(blackHoleRow1, blackHoleRow2, blackHoleRow3, blackHoleRow4, blackHoleRow5, blackHoleRow6);\r\n    gameContainer.append(blackHoleBoard);\r\n  \r\n    // create game status / append it\r\n    const gameStatus = document.createElement('div');\r\n    gameStatus.setAttribute('id', 'gameStatus');\r\n    textNode = document.createTextNode('Starting up...');\r\n    gameStatus.append(textNode);\r\n    gameContainer.append(gameStatus);\r\n  \r\n    optionPopUp('blackHole');\r\n  }\r\n  \r\n  // decide what piece was selected, add them to player list, and then swap player / round\r\n  function placePiece(letter) {\r\n    // find piece that was clicked\r\n    const spaceToAdjust = document.body.querySelector(`#blackHoleSpace${letter}`);\r\n  \r\n    // set player color to show who placed it / log it for future scoring\r\n    if (currentPlayer == 1) {\r\n      spaceToAdjust.style.backgroundColor = '#FF0000';\r\n      player1Tiles.push(spaceToAdjust);\r\n      document.body.querySelector(`#player1Piece${round}`).remove();\r\n    } else {\r\n      spaceToAdjust.style.backgroundColor = '#0000FF';\r\n      player2Tiles.push(spaceToAdjust);\r\n      document.body.querySelector(`#player2Piece${round}`).remove();\r\n    }\r\n    // disable future interactions\r\n    spaceToAdjust.classList.add('isDisabled');\r\n  \r\n    // remove tile from remaining tiles\r\n    remainingTiles.splice(remainingTiles.findIndex((tile) => tile.idName == `blackHoleSpace${letter}`), 1);\r\n  \r\n    // set up needed initialization variables\r\n    spaceToAdjust.innerHTML = round;\r\n  \r\n    // flip player control / iterate to next round if needed\r\n    // round can be used to track what piece need to be used\r\n    if (currentPlayer == 1) {\r\n      currentPlayer++;\r\n      // jump to ai \"move\" if needed\r\n      if (aiPlaying) {\r\n        document.body.querySelector('#gameStatus').innerHTML = 'AI is thinking...';\r\n        aiBlackHoleMove();\r\n      } else {\r\n        document.body.querySelector('#gameStatus').innerHTML = document.body.querySelector('#player2Name').innerHTML;\r\n        document.body.querySelector('#gameStatus').innerHTML += `, place your ${round} piece.`;\r\n      }\r\n    } else if (round == 10) {\r\n      // if player 2 + round 10, game over.\r\n      calculateWinner();\r\n    } else {\r\n      // start next round and player 1's turn\r\n      currentPlayer = 1;\r\n      round++;\r\n      document.body.querySelector('#gameStatus').innerHTML = document.body.querySelector('#player1Name').innerHTML;\r\n      document.body.querySelector('#gameStatus').innerHTML += `, place your ${round} piece.`;\r\n    }\r\n  }\r\n  \r\n  // grabs a random value from the remaining value, delays to simulate thinking,\r\n  // and then chooses that piece\r\n  async function aiBlackHoleMove() {\r\n    document.body.querySelector('#blackHoleBoard').classList.add('isDisabled');\r\n    let randomTile = Math.round(Math.random() * remainingTiles.length);\r\n    if (randomTile == remainingTiles.length) { randomTile = 0; }\r\n    randomTile = remainingTiles[randomTile];\r\n    randomTile = randomTile.idName.charAt(randomTile.idName.length - 1);\r\n    const delayres = await delay(1000);\r\n    document.body.querySelector('#blackHoleBoard').classList.remove('isDisabled');\r\n    placePiece(randomTile.toUpperCase());\r\n  }\r\n  \r\n  // calculate winner of Black Hole\r\n  function calculateWinner() {\r\n    const blackHole = remainingTiles[0].div;\r\n    let blackHoleRow; let\r\n      blackHolePosition;\r\n    const player1ScoreTiles = [];\r\n    const player2ScoreTiles = [];\r\n    let player1Score = 0;\r\n    let player2Score = 0;\r\n    let result;\r\n  \r\n    // find position of black hole in pyramid structure\r\n    for (let i = 0; i < blackHoleBoardArray.length; i++) {\r\n      for (let j = 0; j < blackHoleBoardArray[i].length; j++) {\r\n        if (blackHoleBoardArray[i][j] == blackHole) {\r\n          blackHoleRow = i;\r\n          blackHolePosition = j;\r\n          blackHoleBoardArray[i][j].classList.add('isDisabled');\r\n        }\r\n      }\r\n    }\r\n  \r\n    // create two arrays of sucked in numbers - one for each player\r\n    for (let i = -1; i < 2; i++) {\r\n      for (let j = -1; j < 2; j++) {\r\n        // ignores non-adjacent squares\r\n        if (i != j) {\r\n          // excludes non-real indexes - a lot of weird math behind this one...\r\n          if (\r\n            blackHoleRow + i + blackHolePosition + j < 6\r\n                      && blackHoleRow + i >= 0\r\n                      && blackHolePosition + j >= 0) {\r\n            // check which player's piece was sucked in\r\n            const spaceSuckedIn = blackHoleBoardArray[blackHoleRow + i][blackHolePosition + j];\r\n            // by cycling through all ten possible tiles\r\n            for (let i = 0; i < 10; i++) {\r\n              // push value of space + add it to sum\r\n              if (spaceSuckedIn === player1Tiles[i]) {\r\n                player1ScoreTiles.push(spaceSuckedIn.innerHTML);\r\n                player1Score += parseInt(spaceSuckedIn.innerHTML);\r\n              } else if (spaceSuckedIn === player2Tiles[i]) {\r\n                player2ScoreTiles.push(spaceSuckedIn.innerHTML);\r\n                player2Score += parseInt(spaceSuckedIn.innerHTML);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    // check win conditions\r\n    // if the score is higher\r\n    if (player1Score == player2Score) {\r\n      // tiebreaker 1: if less tiles sucked in\r\n      if (player1ScoreTiles.length == player2ScoreTiles.length) {\r\n        // tiebreaker 2: sort tiles and check which piece is the lowest\r\n        // if they're exactly equal - tie\r\n        player1ScoreTiles.sort((a, b) => b - a);\r\n        player2ScoreTiles.sort((a, b) => b - a);\r\n        for (let i = 0; i < player1ScoreTiles.length; i++) {\r\n          if (player1ScoreTiles[i] < player2ScoreTiles[i]) {\r\n            result = `${document.body.querySelector('#player1Name').innerHTML} has won by having a ${player1ScoreTiles[i]} vs a ${player2ScoreTiles[i]} sucked in!`;\r\n          } else if (player1ScoreTiles[i] > player2ScoreTiles[i]) {\r\n            result = `${document.body.querySelector('#player2Name').innerHTML} has won by having a ${player2ScoreTiles[i]} vs a ${player1ScoreTiles[i]} sucked in!`;\r\n          }\r\n          // everything else is just a result being stored and printed\r\n        }\r\n        if (!result) {\r\n          result = 'This game is a perfect tie!';\r\n        }\r\n      } else if (player1ScoreTiles.length < player2ScoreTiles.length) {\r\n        result = `${document.body.querySelector('#player1Name').innerHTML} has won by having less pieces sucked in!`;\r\n      } else {\r\n        result = `${document.body.querySelector('#player2Name').innerHTML} has won by having less pieces sucked in!`;\r\n      }\r\n    } else if (player1Score < player2Score) {\r\n      result = `${document.body.querySelector('#player1Name').innerHTML} has won by a score of ${player1Score} to ${player2Score}!`;\r\n    } else {\r\n      result = `${document.body.querySelector('#player2Name').innerHTML} has won by a score of ${player2Score} to ${player1Score}!`;\r\n    }\r\n    document.body.querySelector('#gameStatus').innerHTML = result;\r\n  }\r\n\r\n  module.exports = {\r\n    blackHoleLoad\r\n  }\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/gameLogic.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/scriptTagCode.js");
/******/ 	
/******/ })()
;