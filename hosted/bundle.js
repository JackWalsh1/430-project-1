/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/scriptTagCode.js":
/*!*********************************!*\
  !*** ./client/scriptTagCode.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_gameLogic_gameLogic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/gameLogic/gameLogic.js */ \"./src/gameLogic/gameLogic.js\");\n\r\n\r\nconst handleResponse = async (response, parseResponse) => {\r\n\tif (response.status === 200 || response.status === 201) {\r\n\t\tlet responseJSON = await response.json();\r\n\t\tconsole.log(responseJSON);\r\n\t\treturn (0,_src_gameLogic_gameLogic_js__WEBPACK_IMPORTED_MODULE_0__.blackHoleLoad)(responseJSON.gameID);\r\n\t}\r\n\t// get json back\r\n\tlet h1;\r\n\tlet p;\r\n\r\n\t// get content and then create h1 / p if needed - otherwise, just get them\r\n\tconst content = document.querySelector('#result');\r\n\th1 = document.querySelector('#h1');\r\n\tp = document.querySelector('#p');\r\n\r\n\tconst statusCodes = {\r\n\t200: `<b>Success</b>`,\r\n\t201: `<b>Created</b>`,\r\n\t204: `<b>Updated (No Content)</b>`,\r\n\t400: `<b>Bad Request</b>`,\r\n\t404: `<b>Not Found</b>`,\r\n\t409: `<b>Data Conflict</b>`\r\n\t};\r\n\r\n\th1.innerHTML = statusCodes[response.status];\r\n\tif (parseResponse && response.status !== 204) {\r\n\tconst parsedResponse = await response.json();\r\n\r\n\t// if the message is good (aka is the users obj)\r\n\t// then display that\r\n\t// otherwise, display the error\r\n\tp.innerHTML = response.status === 200 \r\n\t? JSON.stringify(parsedResponse.message)\r\n\t: `Message: ${JSON.stringify(parsedResponse.message)}`;\r\n\t} else {\r\n\tp.innerHTML = \"\";\r\n\t}\r\n\r\n\t//Add the elements to the screen.\r\n\tcontent.appendChild(h1);\r\n\tcontent.appendChild(p);    \r\n};\r\n\r\nconst joinGame = async (joinGameForm) => {\r\n\t// build response for get OR head using url / method consts\r\n\tlet gameID = joinGameForm.querySelector(\"#gameIDField\").value;\r\n\t//let url = `/getGame?gameID=${gameID}`;\r\n\tconsole.log(gameID);\r\n\tlet response = await fetch (\"/getGame?gameID=\" + gameID, {\r\n\t\tmethod: \"GET\",\r\n\t\theaders: {\r\n\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t});\r\n\r\n\t// handle the response\r\n\thandleResponse(response, true);\r\n};\r\n\r\nconst createGame = async (createGameForm) => {\r\n\tlet response = await fetch(\"/createGame\", {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n\t\t'Accept': 'application/json',\r\n\t\t},\r\n\t\tbody: `gameID=${createGameForm.querySelector('#gameIDField').value}`,\r\n\t});\r\n\r\n\t// always print a response for post\r\n\thandleResponse(response, true);\r\n};\r\n\r\nconst init = () => {\r\n\tconst joinGameForm = document.querySelector('#joinGameForm');\r\n\tconst createGameForm = document.querySelector('#createGameForm');\r\n\r\n\t// create functions to override initial form functions\r\n\tconst joinGameFormAction = (e) => {\r\n\te.preventDefault();\r\n\tjoinGame(joinGameForm);\r\n\treturn false;\r\n\t};\r\n\r\n\tconst createGameFormAction = (e) => {\r\n\te.preventDefault();\r\n\tcreateGame(createGameForm);\r\n\treturn false;\r\n\t};\r\n\r\n\t// attach evt listeners to forms\r\n\tjoinGameForm.addEventListener('submit', joinGameFormAction);\r\n\tcreateGameForm.addEventListener('submit', createGameFormAction);\r\n\r\n\tdocument.querySelector(\"#gameContainer\").style.display = \"none\";\r\n\r\n\tconst h1 = document.querySelector(\"#h1\");\r\n\r\n\th1.innerHTML = \"script tag worked!\";\r\n};\r\nwindow.onload = init;\n\n//# sourceURL=webpack://430-project-1/./client/scriptTagCode.js?");

/***/ }),

/***/ "./src/gameLogic/buttonClass.js":
/*!**************************************!*\
  !*** ./src/gameLogic/buttonClass.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Button\": () => (/* binding */ Button)\n/* harmony export */ });\n// creates button\r\n// functionName = function that button calls when pressed\r\nclass Button {\r\n  constructor(idName, className, width, height, backgroundColor, text, onclick) {\r\n    this.idName = idName;\r\n    this.className = className;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.backgroundColor = backgroundColor;\r\n    this.text = text;\r\n    this.onclick = onclick;\r\n    this.div = '';\r\n  }\r\n\r\n  // creates button\r\n  createButton() {\r\n    // if not already made\r\n    if (!this.div) {\r\n      // set up container\r\n      const button = document.createElement('div');\r\n\r\n      // input elements\r\n      if (this.idName) {\r\n        button.setAttribute('id', this.idName);\r\n      }\r\n      if (this.className) {\r\n        button.setAttribute('class', this.className);\r\n      }\r\n      if (this.onclick) {\r\n        button.addEventListener('click', evt => {\r\n          this.onclick(evt);\r\n        })\r\n      }\r\n\r\n      // set dimensions / color\r\n      button.style.width = this.width;\r\n      button.style.height = this.height;\r\n      button.style.backgroundColor = this.backgroundColor;\r\n\r\n      // create text\r\n      const textnode = document.createTextNode(this.text);\r\n      button.appendChild(textnode);\r\n\r\n      // log button\r\n      this.div = button;\r\n    }\r\n\r\n    // return button - also works as getter\r\n    return this.div;\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/buttonClass.js?");

/***/ }),

/***/ "./src/gameLogic/gameLogic.js":
/*!************************************!*\
  !*** ./src/gameLogic/gameLogic.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"blackHoleLoad\": () => (/* binding */ blackHoleLoad)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/gameLogic/utils.js\");\n/* harmony import */ var _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buttonClass.js */ \"./src/gameLogic/buttonClass.js\");\n\r\n\r\n\r\n// global containers needed\r\nlet textNode;\r\nlet gameContainer = document.querySelector(\"#gameContainer\");\r\n\r\n// global variables for games\r\nlet currentPlayer;\r\nlet round;\r\nlet aiPlaying;\r\nlet remainingTiles = [];\r\nlet player1Tiles = [];\r\nlet player2Tiles = [];\r\n\r\nlet blackHoleBoardArray;\r\n\r\n// load general structure for black hole\r\nconst blackHoleLoad = async (gameID) => {\r\n  gameContainer = document.querySelector(\"#gameContainer\");\r\n\r\n  // reset game\r\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.flipScreens();\r\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.resetGame(gameContainer);\r\n  _utils_js__WEBPACK_IMPORTED_MODULE_0__.createHeader('blackHole');\r\n\r\n  // get gamestate\r\n  const response = await fetch(`/getGameState?gameID=${gameID}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      Accept: 'application/json',\r\n    },\r\n  });\r\n\r\n  const responseJSON = await response.json();\r\n  const game = responseJSON.game;\r\n\r\n  // set game variables\r\n  round = Math.floor(game.moveCount / 2) + 1;\r\n  currentPlayer = (game.moveCount % 2 === 0) ? 1 : 2;\r\n\r\n  // set defaults to fill in later\r\n  remainingTiles = [];\r\n  player1Tiles = [];\r\n  player2Tiles = [];\r\n\r\n  // create player 1 pieces / container\r\n  const player1Pieces = document.createElement('div');\r\n  player1Pieces.setAttribute('id', 'player1Pieces');\r\n  player1Pieces.setAttribute('class', 'playerPieces');\r\n\r\n  const player1Name = document.createElement('p');\r\n  player1Name.setAttribute('id', 'player1Name');\r\n  player1Name.setAttribute('class', 'playerName');\r\n  player1Name.innerHTML = 'Player';\r\n  player1Pieces.appendChild(player1Name);\r\n\r\n  // only create as many pieces as physically available\r\n  for (let i = round; i < 11; i++) {\r\n    // create space\r\n    const playerPiece = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__.Button(\r\n      `player1Piece${i}`,\r\n      'playerPiece player1Piece',\r\n      '65px',\r\n      '65px',\r\n      '#FF0000',\r\n      i,\r\n      '',\r\n    );\r\n\r\n    player1Pieces.appendChild(playerPiece.createButton());\r\n  }\r\n\r\n  // create player 2 pieces / container\r\n  const player2Pieces = document.createElement('div');\r\n  player2Pieces.setAttribute('id', 'player2Pieces');\r\n  player2Pieces.setAttribute('class', 'playerPieces');\r\n\r\n  const player2Name = document.createElement('p');\r\n  player2Name.setAttribute('id', 'player2Name');\r\n  player2Name.setAttribute('class', 'playerName');\r\n  player2Name.innerHTML = 'Player';\r\n  player2Pieces.appendChild(player2Name);\r\n\r\n  for (let i = 1; i < 11; i++) {\r\n    // create space\r\n    const playerPiece = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__.Button(\r\n      `player2Piece${i}`,\r\n      'playerPiece player2Piece',\r\n      '65px',\r\n      '65px',\r\n      '#0000FF',\r\n      i,\r\n      '',\r\n    );\r\n\r\n    player2Pieces.appendChild(playerPiece.createButton());\r\n  }\r\n\r\n  // append containers\r\n  gameContainer.append(player1Pieces, player2Pieces);\r\n\r\n  // create game board div\r\n  const blackHoleBoard = document.createElement('div');\r\n  blackHoleBoard.setAttribute('id', 'blackHoleBoard');\r\n\r\n  // create rows of game board\r\n  const blackHoleRow1 = document.createElement('div');\r\n  blackHoleRow1.setAttribute('class', 'blackHoleRow');\r\n  const blackHoleRow2 = document.createElement('div');\r\n  blackHoleRow2.setAttribute('class', 'blackHoleRow');\r\n  const blackHoleRow3 = document.createElement('div');\r\n  blackHoleRow3.setAttribute('class', 'blackHoleRow');\r\n  const blackHoleRow4 = document.createElement('div');\r\n  blackHoleRow4.setAttribute('class', 'blackHoleRow');\r\n  const blackHoleRow5 = document.createElement('div');\r\n  blackHoleRow5.setAttribute('class', 'blackHoleRow');\r\n  const blackHoleRow6 = document.createElement('div');\r\n  blackHoleRow6.setAttribute('class', 'blackHoleRow');\r\n\r\n  // reset black hole storage array\r\n  blackHoleBoardArray = [\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n  ];\r\n\r\n  // for each space\r\n  for (let i = 0; i < 21; i++) {\r\n    // create space\r\n    const blackHoleSpace = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_1__.Button(\r\n      `blackHoleSpace${String.fromCharCode(65 + i)}`,\r\n      'blackHoleSpace',\r\n      '88px',\r\n      '88px',\r\n      'gray',\r\n      String.fromCharCode(65 + i),\r\n      (evt) => placePiece(String.fromCharCode(65 + i)),\r\n    );\r\n\r\n    blackHoleSpace.createButton();\r\n\r\n    // sort into pyramid structure\r\n    if (blackHoleBoardArray[0].length < 6) {\r\n      blackHoleBoardArray[0].push(blackHoleSpace.div);\r\n      blackHoleRow1.appendChild(blackHoleSpace.div);\r\n    } else if (blackHoleBoardArray[1].length < 5) {\r\n      blackHoleBoardArray[1].push(blackHoleSpace.div);\r\n      blackHoleRow2.appendChild(blackHoleSpace.div);\r\n    } else if (blackHoleBoardArray[2].length < 4) {\r\n      blackHoleBoardArray[2].push(blackHoleSpace.div);\r\n      blackHoleRow3.appendChild(blackHoleSpace.div);\r\n    } else if (blackHoleBoardArray[3].length < 3) {\r\n      blackHoleBoardArray[3].push(blackHoleSpace.div);\r\n      blackHoleRow4.appendChild(blackHoleSpace.div);\r\n    } else if (blackHoleBoardArray[4].length < 2) {\r\n      blackHoleBoardArray[4].push(blackHoleSpace.div);\r\n      blackHoleRow5.appendChild(blackHoleSpace.div);\r\n    } else {\r\n      blackHoleBoardArray[5].push(blackHoleSpace.div);\r\n      blackHoleRow6.appendChild(blackHoleSpace.div);\r\n    }\r\n\r\n    // push to track remaining tiles\r\n    remainingTiles.push(blackHoleSpace);\r\n  }\r\n\r\n  // append all elements to blackholeBoard + add it to container\r\n  blackHoleBoard.append(blackHoleRow1, blackHoleRow2, blackHoleRow3, blackHoleRow4, blackHoleRow5, blackHoleRow6);\r\n  gameContainer.append(blackHoleBoard);\r\n\r\n  // create game status / append it\r\n  const gameStatus = document.createElement('div');\r\n  gameStatus.setAttribute('id', 'gameStatus');\r\n  textNode = document.createTextNode('Starting up...');\r\n  gameStatus.append(textNode);\r\n  gameContainer.append(gameStatus);\r\n\r\n  console.log(round);\r\n\r\n  // sends to individual option screen\r\n  if (round == 1) {\r\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.optionPopUp(game);\r\n  }\r\n\r\n  // go to game loop\r\n  gameLoop();\r\n};\r\n\r\nfunction createTiles(player, round) {\r\n  return;\r\n}\r\n\r\nfunction gameLoop() {\r\n\r\n}\r\n\r\n// decide what piece was selected, add them to player list, and then swap player / round\r\nconst placePiece = (letter) => {\r\n  // find piece that was clicked\r\n  const spaceToAdjust = document.body.querySelector(`#blackHoleSpace${letter}`);\r\n\r\n  // set player color to show who placed it / log it for future scoring\r\n  if (currentPlayer == 1) {\r\n    spaceToAdjust.style.backgroundColor = '#FF0000';\r\n    player1Tiles.push(spaceToAdjust);\r\n    document.body.querySelector(`#player1Piece${round}`).remove();\r\n  } else {\r\n    spaceToAdjust.style.backgroundColor = '#0000FF';\r\n    player2Tiles.push(spaceToAdjust);\r\n    document.body.querySelector(`#player2Piece${round}`).remove();\r\n  }\r\n  // disable future interactions\r\n  spaceToAdjust.classList.add('isDisabled');\r\n\r\n  // remove tile from remaining tiles\r\n  remainingTiles.splice(remainingTiles.findIndex((tile) => tile.idName == `blackHoleSpace${letter}`), 1);\r\n\r\n  // set up needed initialization variables\r\n  spaceToAdjust.innerHTML = round;\r\n\r\n  // flip player control / iterate to next round if needed\r\n  // round can be used to track what piece need to be used\r\n  if (currentPlayer == 1) {\r\n    currentPlayer++;\r\n    // jump to ai \"move\" if needed\r\n    if (aiPlaying) {\r\n      document.body.querySelector('#gameStatus').innerHTML = 'AI is thinking...';\r\n      aiBlackHoleMove();\r\n    } else {\r\n      document.body.querySelector('#gameStatus').innerHTML = document.body.querySelector('#player2Name').innerHTML;\r\n      document.body.querySelector('#gameStatus').innerHTML += `, place your ${round} piece.`;\r\n    }\r\n  } else if (round == 10) {\r\n    // if player 2 + round 10, game over.\r\n    calculateWinner();\r\n  } else {\r\n    // start next round and player 1's turn\r\n    currentPlayer = 1;\r\n    round++;\r\n    document.body.querySelector('#gameStatus').innerHTML = document.body.querySelector('#player1Name').innerHTML;\r\n    document.body.querySelector('#gameStatus').innerHTML += `, place your ${round} piece.`;\r\n  }\r\n}\r\n\r\n// grabs a random value from the remaining value, delays to simulate thinking,\r\n// and then chooses that piece\r\nasync function aiBlackHoleMove() {\r\n  document.body.querySelector('#blackHoleBoard').classList.add('isDisabled');\r\n  let randomTile = Math.round(Math.random() * remainingTiles.length);\r\n  if (randomTile == remainingTiles.length) { randomTile = 0; }\r\n  randomTile = remainingTiles[randomTile];\r\n  randomTile = randomTile.idName.charAt(randomTile.idName.length - 1);\r\n  const delayres = await delay(1000);\r\n  document.body.querySelector('#blackHoleBoard').classList.remove('isDisabled');\r\n  placePiece(randomTile.toUpperCase());\r\n}\r\n\r\n// calculate winner of Black Hole\r\nfunction calculateWinner() {\r\n  const blackHole = remainingTiles[0].div;\r\n  let blackHoleRow; let\r\n    blackHolePosition;\r\n  const player1ScoreTiles = [];\r\n  const player2ScoreTiles = [];\r\n  let player1Score = 0;\r\n  let player2Score = 0;\r\n  let result;\r\n\r\n  // find position of black hole in pyramid structure\r\n  for (let i = 0; i < blackHoleBoardArray.length; i++) {\r\n    for (let j = 0; j < blackHoleBoardArray[i].length; j++) {\r\n      if (blackHoleBoardArray[i][j] == blackHole) {\r\n        blackHoleRow = i;\r\n        blackHolePosition = j;\r\n        blackHoleBoardArray[i][j].classList.add('isDisabled');\r\n      }\r\n    }\r\n  }\r\n\r\n  // create two arrays of sucked in numbers - one for each player\r\n  for (let i = -1; i < 2; i++) {\r\n    for (let j = -1; j < 2; j++) {\r\n      // ignores non-adjacent squares\r\n      if (i != j) {\r\n        // excludes non-real indexes - a lot of weird math behind this one...\r\n        if (\r\n          blackHoleRow + i + blackHolePosition + j < 6\r\n                      && blackHoleRow + i >= 0\r\n                      && blackHolePosition + j >= 0) {\r\n          // check which player's piece was sucked in\r\n          const spaceSuckedIn = blackHoleBoardArray[blackHoleRow + i][blackHolePosition + j];\r\n          // by cycling through all ten possible tiles\r\n          for (let i = 0; i < 10; i++) {\r\n            // push value of space + add it to sum\r\n            if (spaceSuckedIn === player1Tiles[i]) {\r\n              player1ScoreTiles.push(spaceSuckedIn.innerHTML);\r\n              player1Score += parseInt(spaceSuckedIn.innerHTML);\r\n            } else if (spaceSuckedIn === player2Tiles[i]) {\r\n              player2ScoreTiles.push(spaceSuckedIn.innerHTML);\r\n              player2Score += parseInt(spaceSuckedIn.innerHTML);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // check win conditions\r\n  // if the score is higher\r\n  if (player1Score == player2Score) {\r\n    // tiebreaker 1: if less tiles sucked in\r\n    if (player1ScoreTiles.length == player2ScoreTiles.length) {\r\n      // tiebreaker 2: sort tiles and check which piece is the lowest\r\n      // if they're exactly equal - tie\r\n      player1ScoreTiles.sort((a, b) => b - a);\r\n      player2ScoreTiles.sort((a, b) => b - a);\r\n      for (let i = 0; i < player1ScoreTiles.length; i++) {\r\n        if (player1ScoreTiles[i] < player2ScoreTiles[i]) {\r\n          result = `${document.body.querySelector('#player1Name').innerHTML} has won by having a ${player1ScoreTiles[i]} vs a ${player2ScoreTiles[i]} sucked in!`;\r\n        } else if (player1ScoreTiles[i] > player2ScoreTiles[i]) {\r\n          result = `${document.body.querySelector('#player2Name').innerHTML} has won by having a ${player2ScoreTiles[i]} vs a ${player1ScoreTiles[i]} sucked in!`;\r\n        }\r\n        // everything else is just a result being stored and printed\r\n      }\r\n      if (!result) {\r\n        result = 'This game is a perfect tie!';\r\n      }\r\n    } else if (player1ScoreTiles.length < player2ScoreTiles.length) {\r\n      result = `${document.body.querySelector('#player1Name').innerHTML} has won by having less pieces sucked in!`;\r\n    } else {\r\n      result = `${document.body.querySelector('#player2Name').innerHTML} has won by having less pieces sucked in!`;\r\n    }\r\n  } else if (player1Score < player2Score) {\r\n    result = `${document.body.querySelector('#player1Name').innerHTML} has won by a score of ${player1Score} to ${player2Score}!`;\r\n  } else {\r\n    result = `${document.body.querySelector('#player2Name').innerHTML} has won by a score of ${player2Score} to ${player1Score}!`;\r\n  }\r\n  document.body.querySelector('#gameStatus').innerHTML = result;\r\n}\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/gameLogic.js?");

/***/ }),

/***/ "./src/gameLogic/utils.js":
/*!********************************!*\
  !*** ./src/gameLogic/utils.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closePopUp\": () => (/* binding */ closePopUp),\n/* harmony export */   \"createHeader\": () => (/* binding */ createHeader),\n/* harmony export */   \"delay\": () => (/* binding */ delay),\n/* harmony export */   \"flipScreens\": () => (/* binding */ flipScreens),\n/* harmony export */   \"loadHelpBox\": () => (/* binding */ loadHelpBox),\n/* harmony export */   \"optionPopUp\": () => (/* binding */ optionPopUp),\n/* harmony export */   \"resetGame\": () => (/* binding */ resetGame),\n/* harmony export */   \"setSettings\": () => (/* binding */ setSettings),\n/* harmony export */   \"toggleDiv\": () => (/* binding */ toggleDiv)\n/* harmony export */ });\n/* harmony import */ var _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buttonClass.js */ \"./src/gameLogic/buttonClass.js\");\n\r\n\r\n// load instructions for each game in popup box\r\nfunction loadHelpBox(game) {\r\n  // disable all content outside pop up\r\n  document.body.querySelector('#gameContainer').classList.add('isDisabled');\r\n\r\n  // set up darkening of elements\r\n  const backDim = document.createElement('div');\r\n  backDim.setAttribute('id', 'backDim');\r\n\r\n  // set up actual content of div\r\n  const popUpContainer = document.createElement('div');\r\n  popUpContainer.setAttribute('id', 'popUpContainer');\r\n\r\n  const closeButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__.Button(\r\n    'closeButton',\r\n    '',\r\n    '50px',\r\n    '50px',\r\n    '',\r\n    'X',\r\n    closePopUp,\r\n  );\r\n\r\n  closeButton.createButton();\r\n\r\n  // as procedural based on game, don't add content to yet\r\n  const title = document.createElement('h1');\r\n  title.setAttribute('id', 'popUpTitle');\r\n  const gameInstructions = document.createElement('div');\r\n  gameInstructions.setAttribute('id', 'gameInstructions');\r\n  gameInstructions.scroll(top);\r\n\r\n  // display text of popup\r\n  switch (game) {\r\n    case 'blackHole':\r\n      title.textContent = 'Black Hole';\r\n      gameInstructions.innerHTML = \t\t\t`<h5>In Black Hole, your goal is to have the lowest sum of pieces sucked into the titular \"Black Hole\".<h5>\r\n              <h3>Game Flow</h3>\r\n              <p>Each player, going back and forth, places pieces 1-10 in numerical order. Once all 10 pieces are placed by all players,\r\n              the remaining tile becomes the \"Black Hole\", and sucks in all pieces touching it. The numbers written on the pieces of \r\n              each player that get sucked in are summed together, and the player with the lowest sum wins. In the event of a tie, the \r\n              player with the least pieces sucked in wins - if this does not break the tie, the lowest piece with the most value \r\n              sucked in wins.</p>\r\n              <h3>Controls</h3>\t\r\n              <p>The bottom status bar will say whose turn it is. When it's your turn, click on the tile on the pyramid (labelled with a letter)\r\n              that you would like to place your next piece. You can always know your next piece to place by looking at your tiles on your side\r\n              of the screen, under your name - the highest tile up / the lowest-value tile is what you're placing.</p>`;\r\n      break;\r\n    case 'credits':\r\n      title.textContent = 'Credits';\r\n      gameInstructions.innerHTML = \t\t\t`<h3>Game Created by Walter Joris</h3>\r\n              <h3>Website Created by Jack Walsh</h3>\r\n              <a href=\"https://docs.google.com/document/d/1b6NL-ogLaOMzX2hbALHpSkxvjquQrNXEOjGc5KQCoWQ/edit?usp=sharing\" target=\"_blank\">Documentation</a> `;\r\n      break;\r\n    default:\r\n      title.textContent = 'error';\r\n      gameInstructions.innerHTML = \t\t\t'If you\\'re seeing this, God has died. Only explanation.';\r\n      break;\r\n  }\r\n\r\n  // append elements\r\n  popUpContainer.append(closeButton.div, title, gameInstructions);\r\n  document.body.append(backDim, popUpContainer);\r\n}\r\n\r\n// close popup\r\nconst closePopUp = () => {\r\n  // enable container\r\n  document.body.querySelector('#gameContainer').classList.remove('isDisabled');\r\n\r\n  // delete popup / backDim\r\n  document.querySelector('#backDim').remove();\r\n  document.querySelector('#popUpContainer').remove();\r\n};\r\n\r\n// open option pop up with relevant info for player\r\nfunction optionPopUp(game) {\r\n  let moveCount = game.moveCount;\r\n  // disable all content outside pop up\r\n  document.body.querySelector('#gameContainer').classList.add('isDisabled');\r\n\r\n  // set up darkening of elements\r\n  const backDim = document.createElement('div');\r\n  backDim.setAttribute('id', 'backDim');\r\n\r\n  // set up actual content of div\r\n  const popUpContainer = document.createElement('div');\r\n  popUpContainer.setAttribute('id', 'popUpContainer');\r\n\r\n  const options = document.createElement('div');\r\n  options.setAttribute('id', 'options');\r\n\r\n  const playerName = document.createElement('div');\r\n  playerName.setAttribute('id', 'player1NameContainer');\r\n\r\n  const playerNameInput = document.createElement('input');\r\n  playerNameInput.setAttribute('id', `playerNameInput`);\r\n  playerNameInput.setAttribute('class', 'nameInput');\r\n  playerNameInput.setAttribute('type', 'text');\r\n  playerNameInput.setAttribute('maxlength', '8');\r\n\r\n  const playerNameLabel = document.createElement('label');\r\n  playerNameInput.setAttribute('class', 'label');\r\n  playerNameLabel.htmlFor = `player${moveCount + 1}NameInput`;\r\n  playerNameLabel.innerHTML = `Player ${moveCount + 1} Name: `;\r\n\r\n  playerName.append(playerNameLabel, playerNameInput);\r\n  options.append(playerName);\r\n\r\n  const enterButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__.Button(\r\n    'enterButton',\r\n    '',\r\n    '100px',\r\n    '50px',\r\n    'gray',\r\n    'Start Game',\r\n    (evt) => setSettings(game, true)\r\n  );\r\n\r\n  popUpContainer.append(options, enterButton.createButton());\r\n  document.body.append(backDim, popUpContainer);\r\n}\r\n\r\n// push settings to main game\r\nconst setSettings = (game, fromOptionsMenu) => {\r\n  console.log(\"set settings\");\r\n  // if value just set\r\n  if (fromOptionsMenu) {\r\n    let name = document.querySelector('#playerNameInput').value;\r\n    // if name space was blank, set as Player X - otherwise, use name\r\n    game.playerNames[game.moveCount] = name === '' ? `Player ${game.moveCount + 1}` : name;\r\n  }\r\n\r\n  document.body.querySelector(\"#player1Name\").innerHTML = game.playerNames[0];\r\n  // if player 2 isn't 8 question marks, have it show waiting - else, display name\r\n  document.body.querySelector(\"#player2Name\").innerHTML = game.playerNames[1] === '????????' ? \"P2ToJoin\" : game.playerNames[1];\r\n\r\n  document.body.querySelector('#gameStatus').innerHTML = `${game.playerNames[game.moveCount]}, place your 1 piece.`;\r\n\r\n  document.body.querySelector('#gameContainer').classList.remove('isDisabled');\r\n\r\n  document.querySelector('#backDim').remove();\r\n  document.querySelector('#popUpContainer').remove();\r\n}\r\n\r\n\r\n\r\n// delays function by delay in milliseconds\r\nfunction delay(delayInms) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(2);\r\n    }, delayInms);\r\n  });\r\n}\r\n\r\n// reset div of games\r\nfunction resetGame(gameContainer) {\r\n  // reset HTML\r\n  gameContainer.innerHTML = '';\r\n  gameContainer.className = '';\r\n\r\n  gameContainer.classList = '';\r\n  gameContainer.setAttribute('class', `blackHoleGameScene`);\r\n}\r\n\r\nfunction flipScreens() {\r\n  toggleDiv(\"#homeScreen\");\r\n  toggleDiv(\"#gameContainer\");\r\n}\r\n\r\n// toggles div\r\nfunction toggleDiv(divID) {\r\n  if (document.querySelector(divID).style.display == 'none') {\r\n    document.querySelector(divID).style.display = '';\r\n  } else {\r\n    document.querySelector(divID).style.display = 'none';\r\n  }\r\n}\r\n\r\n// create header for games\r\nfunction createHeader(game) {\r\n  // create container\r\n  const header = document.createElement('div');\r\n  header.setAttribute('id', 'uiHeader');\r\n\r\n  // create back arrow\r\n  const backButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__.Button(\r\n    'backButton',\r\n    '',\r\n    '60px',\r\n    '60px',\r\n    '',\r\n    '←',\r\n    'GameSelect()',\r\n  );\r\n\r\n  const helpButton = new _buttonClass_js__WEBPACK_IMPORTED_MODULE_0__.Button(\r\n    'helpButton',\r\n    '',\r\n    '120px',\r\n    '60px',\r\n    '#FFFF00',\r\n    `${capitalizeMultipleWords(game)} Rules`,\r\n    `loadHelpBox('${game}')`,\r\n  );\r\n\r\n  // create title\r\n  const title = document.createElement('h1');\r\n  title.setAttribute('id', 'gameTitle');\r\n  let textNode = document.createTextNode(capitalizeMultipleWords(game));\r\n  title.appendChild(textNode);\r\n\r\n  // append all items\r\n  header.append(backButton.createButton(), title, helpButton.createButton());\r\n  gameContainer.append(header);\r\n}\r\n\r\n// capitalize multiple words\r\nfunction capitalizeMultipleWords(words) {\r\n  let result = '';\r\n\r\n  for (const letter of words) {\r\n    if (letter == letter.toUpperCase()) {\r\n      // find index of capital\r\n      const indexOfSpace = words.indexOf(letter.toUpperCase());\r\n      // splice at word break\r\n      const wordToCapitalize = words.substring(0, indexOfSpace);\r\n      // add capped word to result\r\n      result += `${capitalizeFirstChar(wordToCapitalize)} `;\r\n      // remove capped word from words string\r\n      words = words.substring(indexOfSpace, words.length);\r\n    }\r\n  }\r\n\r\n  // return result and last word remaining capitalized\r\n  return result + capitalizeFirstChar(words);\r\n}\r\n\r\n// capitalize first character of words\r\nfunction capitalizeFirstChar(word) {\r\n  return word.charAt(0).toUpperCase() + word.slice(1);\r\n}\r\n\n\n//# sourceURL=webpack://430-project-1/./src/gameLogic/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/scriptTagCode.js");
/******/ 	
/******/ })()
;